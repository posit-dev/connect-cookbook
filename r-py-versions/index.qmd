---
title: Retrieve Content Information for R, Python, and Quarto versions
execute: 
  eval: false
---

This recipe yields content information grouped by the versions of R, Python, or Quarto that were used to create that content.

## Requirements

-   CONNECT_SERVER environment variable
-   CONNECT_API_KEY environment variable for an administrator or publisher[^1]
-   Content guid for content of interest

[^1]: the publisher must have access to the content item to retrieve usage statistics

## Method

::: callout-note
:::

This recipe provides methods for:

1.  Retrieving R, Python, and Quarto version information for each piece of content
2.  Identifying owner information for each piece of content
3.  Deploying a sample Quarto dashboard using these methods

### Setup

Install the required packages.

::: {.panel-tabset group="language"}
## Python

We strongly recommend the use of virtual environments to manage project-level dependencies. The code below uses `venv` for this purpose.

``` bash
# In your project directory

# create virtual environment and activate it
python -m venv .venv && source .venv/bin/activate

# upgrade pip, setuptools, and install wheel
python -m pip install -U pip setuptools wheel

# install the `posit-sdk` package
pip install posit-sdk
```

## R

We strongly recommend the use of virtual environments to manage project-level dependencies. The code below uses `renv` for this purpose.

```{r}
# In your project directory

# install `renv` package
install.packages(renv)

# initialize the project-level environment
renv::init()

# install required packages
install.packages(c("connectapi", "tidyverse"))

```
:::

### Retrieve language version for content

The code samples below will yield information on the version of R, Python, and Quarto used to create each piece of content on your Connect server.

::: {.panel-tabset group="language"}
## Python

```{python}

```

## R

```{r}
### Load required packages
library(connectapi)
library(tidyverse)


### Establish connection to Connect server
# Note `connectapi::connect` will automatically detect the environment variables CONNECT_SERVER and CONNECT_API_KEY. They do not need to be specified as arguments to this function, however, if these environment variables are not set, the code will fail
client <- connectapi::connect()

### Retrieve content details
content_info <- connectapi::get_content(client, limit = Inf)

# Create a function to retain only MAJOR.MINOR version components
major_minor  <-  function(versions) {
  sapply(versions, function(version) {
    if (is.na(version) || version == "") {
      NA
    } else {
      parts <- strsplit(version, ".", fixed = TRUE)[[1]]
      paste(parts[1:2], collapse = ".")
    }
  })
}

version_info <- content_info |> 
  mutate(
    python_version = major_minor(py_version),
    r_version = major_minor(r_version),
    quarto_version = major_minor(quarto_version)
  ) |> 
  select(guid, title, created_time, last_deployed_time, 
         app_mode, r_version, python_version, quarto_version, owner, owner_guid, id, app_role, content_url, dashboard_url)
  
### Create an aggregated table to see version counts

version_table <- version_info |> 
  select(python_version, r_version, quarto_version) |> 
  group_by(python_version, r_version, quarto_version) |> 
  summarise(N = n()) |> 
  ungroup() 

version_table()

```

Sample output:

```         
# A tibble: 4 × 4
  python_version r_version quarto_version     N
  <chr>          <chr>     <chr>          <int>
1 3.11           NA        NA                 9
2 NA             4.2       1.3                1
3 NA             4.2       NA                 5
4 NA             NA        NA                 3
```
:::

### Identifying usage by user

It can be helpful to identify the owners of the code.

::: {.panel-tabset group="language"}
## Python

## R

```{r}

### Load required packages
library(connectapi)
library(tidyverse)

client <- connectapi::connect()

### Retrieve content details and unnest owner information
version_by_user <- version_info |> 
    tidyr::unnest_wider(owner, names_repair = "unique") |> 
  select(title, username, r_version, python_version, quarto_version) |> 
  arrange(username, r_version, python_version, quarto_version)
```

Sample output:

```         
# A tibble: 18 × 5
   title                                    username             r_version python_version quarto_version
   <chr>                                    <chr>                <chr>     <chr>          <chr>         
 1 shiny-databricks-odbc                    aaron.jacobs         4.2       NA             NA            
 2 Shiny Shell                              cole                 4.2       NA             NA            
 3 Streamlit Databricks Connect PAT App     david.kegley         NA        3.11           NA            
 4 Streamlit Databricks Connect Viewer App  david.kegley         NA        3.11           NA            
 5 Databricks Demo Streamlit Viewer Auth    david.kegley         NA        3.11           NA            
 6 Databricks Demo Streamlit PAT            david.kegley         NA        3.11           NA            
 7 test-open-access                         gagan                4.2       NA             NA            
 8 hello-world                              garrett              4.2       NA             1.3           
 9 Visit Diagnoses Browser                  isabella.velasquez   4.2       NA             NA            
10 wx_data: a pinned 23306 x 30 DataFrame   nick.pelikan         NA        NA             NA            
11 snotel_data: a pinned 7074 x 6 DataFrame nick.pelikan         NA        NA             NA            
12 snow_sites: a pinned dict object         nick.pelikan         NA        NA             NA            
13 rmd-delay                                pablo.biancolascaray 4.2       NA             NA            
14 flask                                    pablo.biancolascaray NA        3.11           NA            
15 fastapi                                  pablo.biancolascaray NA        3.11           NA            
16 dash                                     pablo.biancolascaray NA        3.11           NA            
17 shiny-python                             pablo.biancolascaray NA        3.11           NA            
18 streamlit                                zack.verham          NA        3.11           NA            
```
:::

## Deploy a sample Quarto dashboard with these metrics

The Quarto document below builds visualizations around the data frames retrieved above. This can be deployed in your own environment, or customized to your needs.

<!-- TODO: Add github repo and manifest.json link -->

::: {.panel-tabset group="language"}
## Python

Tab content

## R

<!-- TODO: Make this embed work -->

{{ \< include \_usage-dashboard.qmd \> }}
:::
