---
title: Creating a Group Using a Remote Authentication Provider (LDAP)
---

## Problem

You need to create a group on Connect from a group that already exists in your LDAP authentication provider.

## Solution

Search your LDAP authentication provider for the group, and create a corresponding group on Connect. You will need the name of the group you wish to create.

::: {.callout-note}
This recipe is very similar to the one to [Creating a User Using LDAP](../../02-users/09-creating-a-user-using-ldap/index.qmd). If you also need to create users, combining these two or doing them in sequence might be helpful.
:::

:::{.panel-tabset group="language"}

## Python

### Find the remote group to add

```{.python}
from posit import connect
import polars as pl

GROUP_PREFIX = "Data Science"

client = connect.Client()

response = client.get("v1/groups/remote", params={"prefix": GROUP_PREFIX})
remote_groups_df = pl.DataFrame(response.json()["results"])
```

The resulting DataFrame contains information on remote groups whose name matches the prefix `Data Science`.

```
>>> remote_groups_df
shape: (2, 3)
┌──────────────────────────────┬─────────────────────────────────┬─────────────────────────────────┐
│ name                         ┆ guid                            ┆ temp_ticket                     │
│ ---                          ┆ ---                             ┆ ---                             │
│ str                          ┆ str                             ┆ str                             │
╞══════════════════════════════╪═════════════════════════════════╪═════════════════════════════════╡
│ Data Science                 ┆ 51a3747a-88c9-4d6c-a791-17c194… ┆ jcmyc+C5owWnbOax/DIMNKCjAitdKY… │
│ Data Science Apprentices     ┆ null                            ┆ oBDwIisVy03JhjNI/VYwWy4KrXQe7V… │
└──────────────────────────────┴─────────────────────────────────┴─────────────────────────────────┘
```

We have two groups here, `Data Science` and `Data Science Apprentices`. The `Data Science` group has a GUID, which means that it already has a group on Connect, but the second `Data Science Apprentices` group does not have a GUID which means that it is not present as a group on Connect.

Included in the API response for each group is a `temp_ticket` value, which can be used to create the group in Connect. In the example above, the second group, `Data Science Apprentices`, does not exist in Connect, so you need the `temp_ticket` for this group to create the group in Connect.

```{.python}
temp_ticket = remote_groups_df["temp_ticket"][1]
```

### Create the group on Connect

Using the `temp_ticket` value from the previous section, you can create
a Connect group with a **[`PUT /v1/groups`](/api/#put-/v1/groups)** endpoint:

```{.python}
# The 'temp_ticket' value comes from an earlier /groups/remote search.
response = client.put("v1/groups", json={"temp_ticket": temp_ticket})
```

When the call succeeds, the response contains a non-NULL `guid` value,
which is a unique identifier for the group.

```{.python}
pl.DataFrame(response.json())
┌─────────────────────────────────┬──────────────────────────────┬────────────┐
│ guid                            ┆ name                         ┆ owner_guid │
│ ---                             ┆ ---                          ┆ ---        │
│ str                             ┆ str                          ┆ null       │
╞═════════════════════════════════╪══════════════════════════════╪════════════╡
│ f13a7792-7b6e-4fc9-9843-90b291… ┆ Data Science Apprentices     ┆ null       │
└─────────────────────────────────┴──────────────────────────────┴────────────┘
```

If the group already exists in Connect, the request errors:

```
ClientError: A group using the same unique ID already exists
```


## R

### Find the remote group to add

```{.r}
library(connectapi)
library(purrr)
library(tibble)

GROUP_PREFIX <- "Data Science"

client <- connect()

remote_groups <- client$groups_remote(GROUP_PREFIX)

remote_groups_df <- tibble(
  name = map_chr(remote_groups$results, ~.$name),
  guid = map_chr(remote_groups$results,  ~ifelse(is.null(.$guid), NA, .$guid)),
  temp_ticket = map_chr(remote_groups$results, ~.$temp_ticket)
)
```

The resulting data frame contains information on remote groups whose name matches the prefix `Data Science`.

```
> remote_groups_df
A tibble: 2 × 3
  name                         guid                                 temp_ticket
  <chr>                        <chr>                                <chr>
1 Data Science                 51a3747a-88c9-4d6c-a791-17c194f0a663 isMU7qo46iGlOZosHGz8NbIG3ciOimKNCn90kln57D…
2 Data Science Apprentices     NA                                   p5OYtB634uqqfCf72p/KmCtTT9pn7Bpj/6CrGP9ynX…
>
```

We have two groups here, `Data Science` and `Data Science Apprentices`. The `Data Science` group has a GUID, which means that it already has a group on Connect, but the second `Data Science Apprentices` group does not have a GUID which means that it is not present as a group on Connect.

### Create the group on Connect

The `connectapi` package has a function to create groups directly:

```{.r}
groups_create_remote(client, prefix = "Data Science Apprentices")
```

The function returns a data frame showing the newly-created group with, with a non-NULL GUID.

```{.r}
Creating remote group: Data Science Apprentices
Done creating remote groups
# A tibble: 1 × 3
  guid                                 name                     owner_guid
  <chr>                                <chr>                    <chr>
1 b806d590-5d52-478e-a9d8-491228b090e7 Data Science Apprentices NA
```

If the group already exists in Connect, the same data is returned, but a different message is printed.

```{.r}
At least one group with name prefix 'Data Science Apprentices' already exists
# A tibble: 1 × 3
  guid                                 name                     owner_guid
  <chr>                                <chr>                    <chr>
1 b806d590-5d52-478e-a9d8-491228b090e7 Data Science Apprentices NA
```

:::
