---
title: Recipe Title
---

## Problem

[Describe what the recipe does or set up the problem the user can solve with it, e.g., "You need to assign tags to content on your Connect server" or "You want to organize content on Connect."]

## Solution

[Describe the solution in natural language. If the workflow is common between Python and R, describe it outside language tabs, but if they're significantly different, describe it in language-specific sections.

The recipe should describe the inputs, workflow, and outputs, but doesn't need to follow a specific format for listing them out. Shorter recipes might just require a code block, and others might require more detail.]

E.g. Assign a tag to your content. This requires obtaining the content item's unique identifier. See [Getting a content identifier](#some-other-section).

:::{.panel-tabset group="language"}

## Python

[Describe the language-specific parts of the workflow inside language tabs, e.g. "This recipe requires the identifier of the tag you wish to use"]

```{.python}
# Notes to recipe writer:
# - Include comments where appropriate. If comments are longer than a line
#   or two, you can break up the code block.
# - Include the imports and client creation at the top of the workflow.
# - The recipe should ideally end with the creation of an object representing
#   the output of the workflow, which is printed in a subsequent block.


from posit import connect

# Note to recipe writer: User-defined constants go in all-caps, immediately
# after the import statements. Consider using comments to make it obvious
# what the values are and how to get them even if the code has been copied
# out of the recipe page.

# 1. Specify abc. Any clarifying text and what the default value is (if any).
ABC = "154bd2af-e8fa-4aa4-aab8-dcef701f4af9"
# 2. Specify xyz. Any clarifying text and what the default value is (if any).
XYZ = "23"

client = connect.Client()

new_var = do_something(ABC, XYZ)
```

[You may use multiple code blocks, separated by prose, if your example needs a lot of explanation.]

```{.python}
# Second code block
output_df = function(ABC, new_var)
```

[Describe the output, e.g. "The recipe produces a data frame of outputs." When displaying outputs, display the output from an interactive session.]

```{.python}
# Note to recipe writer: print the result of the recipe in a REPL/console
# style code block.
>>> output_df
[output printout]
```

### [Optional] Full example

[If the recipe includes multiple code blocks, include a section with all the code in a single copyable block.]

```{.python}
from posit import connect

# Define inputs
ABC = "154bd2af-e8fa-4aa4-aab8-dcef701f4af9"
XYZ = "23"

client = connect.Client()

new_var = do_something(ABC, XYZ)
output_df = function(ABC, new_var)
```

## R

```{.r}
# Notes to recipe writer:
# - Include comments where appropriate. If comments are longer than a line
#   or two, you can break up the code block.
# - Include the imports and client creation at the top of the workflow.
# - The recipe should ideally end with the creation of an object representing
#   the output of the workflow, which is printed in a subsequent block.

library(connectapi)

# Note to recipe writer: User-defined constants go in all-caps, immediately
# after the import statements. Consider using comments to make it obvious
# what the values are and how to get them even if the code has been copied
# out of the recipe page.

# 1. Specify abc. Any clarifying text and what the default value is (if any).
ABC <- "154bd2af-e8fa-4aa4-aab8-dcef701f4af9"
# 2. Specify xyz. Any clarifying text and what the default value is (if any).
XYZ <- "23"

client <- connect()

new_var <- do_something(ABC, XYZ)
output_df <- function(ABC, new_var)
```

[Describe the output, e.g. "The recipe produces a data frame of outputs." When displaying outputs, display the output from an interactive session.]

```{.r}
# Note to recipe writer: print the result of the recipe in a REPL/console
# style code block.
> output_df
[1] "xyz"
```

:::

### [Optional additional subheadings, e.g. Deploy a dashboard to monitor usage]

[Some recipes may have additional sections. These might have more language blocks. They might describe other related workflows, or provide supplemental material like tashboards to deploy.]

E.g. Here's a dashboard or something else that deploy or do.

:::{.panel-tabset group="language"}

## Python

```{.python}
hello_world()
```

## R

```{.r}
hello_world()
```

:::

## [Optional] Discussion

Optionally give more detail on the subject at hand.

## [Optional] See also

Optionally link to other sections of the Posit Connect documentation.

