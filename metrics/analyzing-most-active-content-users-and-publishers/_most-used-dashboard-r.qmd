---
title: Most Popular Content on Connect
format:
  dashboard:
     theme: default
     orientation: rows
---

```{r}
#| label: setup

library(connectapi)
library(tidyverse)
library(gt)
library(plotly)
```


```{r}
#| label: user-defined inputs

### User-defined inputs
# 1. Specify timeframe for the report. Default is 90 days prior to today
as_of_date <- today()
days_back <- 90
report_from <- as_of_date - ddays(days_back)

# 2. Specify the number of content items to report as the Top N pieces of content. Default is to show the `top_n <- 20` pieces of content.
top_n <- 20


# Note: The CONNECT_SERVER and CONNECT_API_KEY environment variables are required for this report to pull usage data. Use environment variables for added security; do not hard-code your API key or other secrets.

```


```{r}
#| label: Establish connection to Connect server

# Note `connectapi::connect` automatically detects the environment variables CONNECT_SERVER and CONNECT_API_KEY. They do not need to be specified as arguments to this function, however, if these environment variables are not set, the code will fail
client <- connect()

```

```{r}
#| label: Get content info and usage

### Retrieve content details and select relevant columns
content_info <- connectapi::get_content(client) |>
  hoist(owner, owner_username = "username") |>
  select(guid, name, title, owner_username, dashboard_url)

### Query for both shiny and non-shiny usage data

usage_shiny <- get_usage_shiny(client,
    from = report_from,
    to = as_of_date,
    limit = Inf
  )

usage_non_shiny <- get_usage_static(client,
    from = report_from,
    to = as_of_date,
    limit = Inf
  ) |>
    rename(started = time) |>
    mutate(ended = started)


usage <- bind_rows(usage_shiny, usage_non_shiny) |>
  mutate(day = as.Date(started)) |>
  select(content_guid, user_guid, day) |>
  # filter out any content items that may have been deleted
  filter(content_guid %in% content_info$guid)

### Get all user details to cross reference user_guids with usernames
all_users <- connectapi::get_users(client, limit = Inf) |>
  select(guid, username, email) |> rename(user_guid = guid)


```

## Row

Content usage on Connect for the period of **`r report_from`** to **`r as_of_date`**


## Row

```{r}
#| label: plot total content usage over time

usage_plot_data <- usage |>
    group_by(day) |>
    summarise(usage = n()) |>
    arrange(day)

# generate plot
gg <- ggplot(usage_plot_data, aes(day, usage)) +
     geom_line(color = "#AE929F", linewidth = 1) +
     theme_minimal() +
     labs(
       y = NULL,
       x = NULL,
       title = glue::glue("Total usage for the {days_back} day period"),
     )

# make interactive with plotly
ggplotly(gg) |>
      config(displayModeBar = FALSE)


```

## Row

```{r}
#| label: bar graph of top N content items

top_n_content <- usage |>
  group_by(content_guid) |>
  summarise(tot_usage = n()) |>
  arrange(desc(tot_usage)) |>
  head(top_n) |>
  left_join(content_info, by = c(content_guid = "guid")) |>
  # if title is NA then substitute with name
  mutate(title = coalesce(title, name))

# generate plot
gg <- ggplot(top_n_content, aes(x = reorder(title, tot_usage), y = tot_usage,
text=paste("owner username:",owner_username))) +
  geom_col(fill = "#16565A") +
  coord_flip() +
  theme_minimal() +
  labs(
    x = NULL,
    y = "content hits",
    title = glue::glue("Top {top_n} content items)")
  )

# make interactive with plotly and include the owner_username and tot_usage in the tooltip
ggplotly(gg, tooltip = c("y", "text")) |>
      config(displayModeBar = FALSE)


```

```{r}
#| label: bar graph of top N content users

# identify top N content users and identify their most-frequently used content item
top_n_users <- usage |>
  select(-day) |>
  group_by(user_guid, content_guid) |>
  # count a user's usage of a content item
  mutate(content_hits = n()) |>
  ungroup() |>
  group_by(user_guid) |>
  # count a user's total usage of all content
  mutate(users_tot_usage = n()) |>
  arrange(desc(content_hits)) |>
  # slice to save only each user's most frequently accessed content item
  slice(1) |>
  ungroup() |>
  # what fraction of a user's total usage is their most frequently accessed content item
  mutate(top_item_percent_of_usage = content_hits / users_tot_usage) |>
  # select only the top N users
  arrange(desc(users_tot_usage)) |>
  head(top_n) |>
  left_join(all_users, by = "user_guid") |>
  mutate(username = coalesce(username, "anonymous")) |>
  left_join(content_info, by = c(content_guid = "guid")) |>
  # if title is NA then substitute with name
  mutate(title = coalesce(title, name)) |>
  rename(users_most_frequent_content = title) |>
  select(username, users_most_frequent_content, users_tot_usage, top_item_percent_of_usage)


# generate plot
gg <- ggplot(top_n_users, aes(
  x = reorder(username, users_tot_usage), y = users_tot_usage,
  # text=paste("most used content:",users_most_frequent_content)
  text = glue::glue("total usage: {users_tot_usage} \nmost frequently accessed content: {users_most_frequent_content} \n% of all content hits spent on \'{users_most_frequent_content}\': {scales::percent(top_item_percent_of_usage,1)}")
)) +
  geom_col(fill = "#16565A") +
  coord_flip() +
  theme_minimal() +
  labs(
    x = NULL,
    y = "content hits",
    title = glue::glue("Top {top_n} content users")
  )


# make interactive with plotly and include the owner_username and tot_usage in the tooltip
ggplotly(gg, tooltip = c("text")) |>
  config(displayModeBar = FALSE)

```


```{r}
#| label: bar graph of top N publishers

top_n_publishers <- usage |>
    left_join(content_info, by = c(content_guid = "guid")) |>
    select(content_guid, name, title, owner_username) |>
    group_by(content_guid) |>
    mutate(content_hits = n()) |>
    ungroup() |>
    group_by(owner_username) |>
    # number of owner's distinct content items accessed in the period
    mutate(num_owners_items_accessed = n_distinct(content_guid)) |>
    mutate(owners_tot_usage = n()) |>
    arrange(desc(content_hits)) |>
    slice(1) |>
    arrange(desc(owners_tot_usage)) |>
    head(top_n) |>
    # if title is NA then substitute with name
    mutate(title = coalesce(title, name)) |>
    rename(owners_most_frequent_content = title, owners_most_frequent_content_hits = content_hits) |>
    select(-content_guid, -name)


# generate plot
gg <- ggplot(top_n_publishers, aes(
  x = reorder(owner_username, owners_tot_usage), y = owners_tot_usage,
  text = glue::glue("all content hits: {owners_tot_usage} \nnumber of distinct content items accessed in period: {num_owners_items_accessed} \nmost frequently accessed content: {owners_most_frequent_content} \nhits for \'{owners_most_frequent_content}\': {owners_most_frequent_content_hits}")
)) +
  geom_col(fill = "#16565A") +
  coord_flip() +
  theme_minimal() +
  labs(
    x = NULL,
    y = "content hits",
    title = glue::glue("Top {top_n} publishers")
  )


# make interactive with plotly and include the owner_username and tot_usage in the tooltip
ggplotly(gg, tooltip = c("text")) |>
  config(displayModeBar = FALSE)


```
