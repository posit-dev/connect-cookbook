---
title: Search for content based on group ownership
execute: 
  eval: false
---

## Description 

This recipe searches Connect for content that is accessible to a group. 
This is useful for auditing access control lists for content on your server, 
or validating that the various groups you manage have access to all the content 
they should.

::: {.callout-note}
Administrator credentials are needed in order to perform this action.
::: 

## Output

This recipe generates a data frame of content GUIDs and titles that the group has access to.

You might have a GUID already, but you can also use the **[`GET /v1/groups/`](../../api/#get-/v1/groups)** endpoint to search for groups and their corresponding GUIDs.

## Workflow
This recipe requires the following inputs:

1. The GUID of the group that you are interested in. 

This recipe then does the following:

1. Queries the **[`GET /v1/experimental/groups/:guid/content`](../../api/#get-/v1/experimental/groups/-guid-/content)**
endpoint which returns a list of content that group has access to.

## Recipe

:::{.panel-tabset group="language"}

## Python

```{.python}
from posit import connect
import polars as pl
client = connect.Client() 

### User-defined inputs ###
# 1. The GUID of the group you want to look up
group_GUID = "e81c2c09-cd4c-468c-b6b8-891cd49363f0" 
###########################

results = client.get(f"v1/experimental/groups/{group_GUID}/content")
results_df = pl.DataFrame(results.json())

results_df[["content_guid", "content_title"]]
```

### Example output

```
shape: (3, 2)
┌─────────────────────────────────┬──────────────────────────┐
│ content_guid                    ┆ content_title            │
│ ---                             ┆ ---                      │
│ str                             ┆ str                      │
╞═════════════════════════════════╪══════════════════════════╡
│ 0bef0ba7-1470-458f-95b3-6e93c3… ┆ quarto-stock-report-r    │
│ 2aa38512-46e4-4be7-9bb9-0b32a9… ┆ Stock Report             │
│ f33285e4-6916-4241-b241-858f03… ┆ top-5-income-share-shiny │
└─────────────────────────────────┴──────────────────────────┘
```

## R

```{.r}
library(connectapi)
library(purrr)
client <- connect()

### User-defined inputs ###
# 1. The GUID of the group you want to look up
group_GUID <- "e81c2c09-cd4c-468c-b6b8-891cd49363f0" 
###########################

results <- client$GET(glue::glue("v1/experimental/groups/{group_GUID}/content"))

data.frame(
  content_guid = map_chr(results, ~.$content_guid),
  content_title = map_chr(results, ~.$content_title)
)
```

### Example output

```
                          content_guid            content_title
1 f33285e4-6916-4241-b241-858f0335ba38 top-5-income-share-shiny
2 0bef0ba7-1470-458f-95b3-6e93c31c78b7    quarto-stock-report-r
3 2aa38512-46e4-4be7-9bb9-0b32a9370fc7             Stock Report
```

:::

## Extending the recipe

Now that you have the content that a group can see, you can use the content GUID 
in other recipes like [Remove all viewers from a content item](../../content/remove-all-content-users/) 
to prevent the group (and others) from being able to access that that content.
