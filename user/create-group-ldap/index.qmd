---
title: Create a Posit Connect group from LDAP
execute: 
  eval: false
---

## Description 

This recipe searches for a group that is present in an LDAP authentication provider but not yet on Posit Connect and creates that group on Connect.

## Output

This recipe searches for a group that is present in an LDAP authentication provider but not yet on Posit Connect and creates that group on Posit Connect.

## Workflow
This recipe requires the name of the group you want to add.


This recipe then does the following:

1.  Search for the group via the **[`GET /v1/groups/remote`](../../api/#get-/v1/groups/remote)** endpoint.
1.  Note the `temp_ticket` for the desired group.
1.  Use the **[`PUT /v1/groups`](../../api/#put-/v1/groups)** endpoint with the `temp_ticket` to create a corresponding group on Connect.


## Recipe

:::{.panel-tabset group="language"}

## Python

### Find the group to add

```{.python}
from posit import connect
import polars as pl
client = connect.Client() 

### User-defined inputs ###
# 1. The group you want to search for
group_prefix = "Data Science"
###########################

response = client.get("v1/groups/remote", params={"prefix": group_prefix})
results_df = pl.DataFrame(response.json()['results'])

results_df
```

#### Example output

```
shape: (2, 3)
┌──────────────────────────────┬─────────────────────────────────┬─────────────────────────────────┐
│ name                         ┆ guid                            ┆ temp_ticket                     │
│ ---                          ┆ ---                             ┆ ---                             │
│ str                          ┆ str                             ┆ str                             │
╞══════════════════════════════╪═════════════════════════════════╪═════════════════════════════════╡
│ Data Science                 ┆ 51a3747a-88c9-4d6c-a791-17c194… ┆ jcmyc+C5owWnbOax/DIMNKCjAitdKY… │
│ Data Science Apprentices     ┆ null                            ┆ oBDwIisVy03JhjNI/VYwWy4KrXQe7V… │
└──────────────────────────────┴─────────────────────────────────┴─────────────────────────────────┘
```

We have two groups here (`Data Science` and `Data Science Apprentices`). The `Data Science` group has a GUID, which means that it already has a group on Connect, but the second `Data Science Apprentices` group does not have a GUID which means that it is not present as a group on Connect. 

Included in the API response for each group is a `temp_ticket` value which can be used to create the group in Connect. In the example above, the second group, `Data Science Apprentices`, does not exist in Connect, so you need the `temp_ticket` for this group to create the group in Connect.

```{.python}
temp_ticket = results_df["temp_ticket"][1]
```

### Creating the group

Using the `temp_ticket` value from the previous section, you can create
a Connect group with a **[`PUT /v1/groups`](../../api/#put-/v1/groups)** endpoint:

```{.python}
# The 'temp_ticket' value comes from an earlier /groups/remote search.
response = client.put("v1/groups", json={"temp_ticket": temp_ticket})

pl.DataFrame(response.json())
```

#### Example output

When the call succeeds, the response contains a non-NULL `guid` value,
which is a unique identifier for the group.

```
┌─────────────────────────────────┬──────────────────────────────┬────────────┐
│ guid                            ┆ name                         ┆ owner_guid │
│ ---                             ┆ ---                          ┆ ---        │
│ str                             ┆ str                          ┆ null       │
╞═════════════════════════════════╪══════════════════════════════╪════════════╡
│ f13a7792-7b6e-4fc9-9843-90b291… ┆ Data Science Apprentices     ┆ null       │
└─────────────────────────────────┴──────────────────────────────┴────────────┘
```

If the group already exists in Connect, the request will error:

```
ClientError: A group using the same unique ID already exists
```


## R

### Find the group to add
```{.r}
library(connectapi)
library(purrr)
library(tibble)
client <- connect()


### User-defined inputs ###
# 1. The group you want to search for
group_prefix <- "Data Science"
###########################

remote_groups <- client$groups_remote(group_prefix)

tibble(
  name = map_chr(remote_groups$results, ~.$name),
  guid = map_chr(remote_groups$results,  ~ifelse(is.null(.$guid), NA, .$guid)),
  temp_ticket = map_chr(remote_groups$results, ~.$temp_ticket)
)
```

#### Example output

```
A tibble: 2 × 3
  name                         guid                                 temp_ticket                                
  <chr>                        <chr>                                <chr>                                      
1 Data Science                 51a3747a-88c9-4d6c-a791-17c194f0a663 isMU7qo46iGlOZosHGz8NbIG3ciOimKNCn90kln57D…
2 Data Science Apprentices     NA                                   p5OYtB634uqqfCf72p/KmCtTT9pn7Bpj/6CrGP9ynX…
>
```

We have two groups here (`Data Science` and `Data Science Apprentices`). The `Data Science` group has a GUID, which means that it already has a group on Connect, but the second `Data Science Apprentices` group does not have a GUID which means that it is not present as a group on Connect. 

### Creating the group

The `connectapi` SDK has a function to create groups directly:

```{.r}
groups_create_remote(client, prefix = "Data Science Apprentices")
```

#### Example output

When the call succeeds, the response contains a non-NULL `guid` value,
which is a unique identifier for the group.

```
Creating remote group: Data Science Apprentices
Done creating remote groups
# A tibble: 1 × 3
  guid                                 name                     owner_guid
  <chr>                                <chr>                    <chr>     
1 b806d590-5d52-478e-a9d8-491228b090e7 Data Science Apprentices NA  
```

If the group already exists in Connect, the same call will return:

```
At least one group with name prefix 'Data Science Apprentices' already exists
# A tibble: 1 × 3
  guid                                 name                     owner_guid
  <chr>                                <chr>                    <chr>     
1 b806d590-5d52-478e-a9d8-491228b090e7 Data Science Apprentices NA        
```


:::
