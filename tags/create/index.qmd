---
title: "Creating tags"
execute:
    eval: false
---

## Description

Create tags, which can then be assigned to content items (see [*Assigning tags*](../assign/index.qmd)).

Tags can be nested arbitrarily deep.

::: {.callout-warning}

You must have administrator privileges to create a tag.

:::

## Recipe: Create a tag at the top level of the hierarchy

Create a tag without a parent tag. This tag will appear at the top level of the hierarchy.

::: {.panel-tabset group="language"}

## Python

```{.python}
from posit import connect
client = connect.Client()

response = client.post("/v1/tags", json={
    "name": "Departments",
})
```

### Example Output
```{.python}
>>> pl.DataFrame(response.json())
shape: (1, 5)
┌─────┬─────────────┬───────────┬──────────────────────┬──────────────────────┐
│ id  ┆ name        ┆ parent_id ┆ created_time         ┆ updated_time         │
│ --- ┆ ---         ┆ ---       ┆ ---                  ┆ ---                  │
│ str ┆ str         ┆ null      ┆ str                  ┆ str                  │
╞═════╪═════════════╪═══════════╪══════════════════════╪══════════════════════╡
│ 100 ┆ Departments ┆ null      ┆ 2024-06-20T14:25:20Z ┆ 2024-06-20T14:25:20Z │
└─────┴─────────────┴───────────┴──────────────────────┴──────────────────────┘
```


## R

```{.r}
library(connectapi)
client <- connect()

create_tag(client, "Departments")

tags <- get_tags(client)
depts_tag <- tags$Departments
```

### Example output

```{.r}
> depts_tag
Posit Connect Tag Tree (filtered)
└── Departments
```

:::

## Recipe: Create a nested tag

You can create a hierarchy of tags by nesting a tag underneath another tag. To do this, specify the identifier of the parent tag.

::: {.callout-warning}

You must have administrator privileges to create a tag.

:::

::: {.panel-tabset group="language"}

## Python

### Prerequisites

Before executing, ensure you have the following information:

- The identifier for the parent tag.

### Code

```{.python}
from posit import connect
client = connect.Client()

# The ID of the "Departments" tag we created above.
parent_tag_id = "100"

res = client.post("/v1/tags", json={
    "name": "Administrative",
    "parent_id": parent_tag_id
})
```

### Example Output

::: {.callout-tip}

The `parent_id` shown below, `100`, is the identifier of the `Departments` tag shown in the prior example.

:::

```{.python}
>>> pl.DataFrame(res.json())
shape: (1, 5)
┌─────┬────────────────┬───────────┬──────────────────────┬──────────────────────┐
│ id  ┆ name           ┆ parent_id ┆ created_time         ┆ updated_time         │
│ --- ┆ ---            ┆ ---       ┆ ---                  ┆ ---                  │
│ str ┆ str            ┆ str       ┆ str                  ┆ str                  │
╞═════╪════════════════╪═══════════╪══════════════════════╪══════════════════════╡
│ 200 ┆ Administrative ┆ 100       ┆ 2024-06-20T14:27:22Z ┆ 2024-06-20T14:27:22Z │
└─────┴────────────────┴───────────┴──────────────────────┴──────────────────────┘
```

## R

### Prerequisites

1. A `Tag` object representing the parent tag

### Code

```{.r}
library(connectapi)
client <- connect()

tags <- get_tags(client)
depts_tag <- tags$Departments

create_tag(client, "Administrative", depts_tag)
tags <- get_tags(client)
depts_tag <- tags$Departments
admin_tag <- tags$Departments$Administrative
```

### Example output

```{.r}
> depts_tag
Posit Connect Tag Tree (filtered)
Departments
└── Administrative
> admin_tag
Posit Connect Tag Tree (filtered)
└── Administrative
```

:::
