---
title: "Finding tags"
execute:
    eval: false
---

## Description

You want to find tag information.

## Recipe: Find tags

::: {.panel-tabset group="language"}

## Python

```{.python}
from posit import connect
client = connect.Client()

res = client.get("/v1/tags")
print(tags)
```

### Expected output

```{.python}
>>> pl.DataFrame(res.json())
shape: (309, 5)
┌─────┬─────────────────────────────────┬───────────┬──────────────────────┬──────────────────────┐
│ id  ┆ name                            ┆ parent_id ┆ created_time         ┆ updated_time         │
│ --- ┆ ---                             ┆ ---       ┆ ---                  ┆ ---                  │
│ str ┆ str                             ┆ str       ┆ str                  ┆ str                  │
╞═════╪═════════════════════════════════╪═══════════╪══════════════════════╪══════════════════════╡
│ 1   ┆ Technology                      ┆ null      ┆ 2017-04-18T19:53:45Z ┆ 2017-05-01T11:29:36Z │
│ 2   ┆ Health                          ┆ null      ┆ 2017-04-18T19:54:05Z ┆ 2017-05-02T13:57:31Z │
│ 4   ┆ Software                        ┆ 1         ┆ 2017-04-18T19:54:24Z ┆ 2017-05-19T18:15:39Z │
│ 5   ┆ Mobile Apps                     ┆ 4         ┆ 2017-04-18T19:54:32Z ┆ 2017-05-03T20:15:27Z │
│ 6   ┆ Version 1.6.0                   ┆ 207       ┆ 2017-05-18T04:53:31Z ┆ 2017-05-18T05:00:20Z │
│ …   ┆ …                               ┆ …         ┆ …                    ┆ …                    │
│ 751 ┆ Artificial Intelligence         ┆ 736       ┆ 2024-06-03T03:26:58Z ┆ 2024-06-03T04:03:24Z │
│ 752 ┆ Machine Learning                ┆ 736       ┆ 2024-06-03T03:27:43Z ┆ 2024-06-03T04:04:04Z │
│ 753 ┆ Deep Learning                   ┆ 736       ┆ 2024-06-03T03:28:12Z ┆ 2024-06-03T04:04:16Z │
└─────┴─────────────────────────────────┴───────────┴──────────────────────┴──────────────────────┘
```


## R

Use the `get_tags()` function to get a tree of tags that you can browse using R's `$` operator. Alternately, use the `get_tag_data()` function to get a data frame of tag data.

The tags you get from `get_tags()` can be used in other tag-related functions.

```{.r}
library(connectapi)
client <- connect()

tag_tree <- get_tags(client)
tag <- tag_tree$Departments$Administrative
tag_data <- get_tag_data(client)
```

### Expected output

```{.r}
> tag_tree
Posit Connect Tag Tree (target_content)
└── Departments
   └── Administrative
> tag
Posit Connect Tag Tree (filtered)
└── Administrative
> tag_data
# A tibble: 2 × 5
  id    name           created_time         updated_time         parent_id
  <chr> <chr>          <chr>                <chr>                <chr>    
1 757   Departments    2024-06-20T14:25:20Z 2024-06-20T14:25:20Z NA       
2 758   Administrative 2024-06-20T14:27:22Z 2024-06-20T14:27:22Z 757 
``` 

:::

## Recipe: Find content items by tag

A tag identifier is required to find content items.

::: {.panel-tabset group="language"}

## Python

```{.python}
from posit import connect
client = connect.Client()

TAG_ID = "your-tag-id"

res = client.get(f"/v1/tags/{TAG_ID}/content")
```

```{.python}
>>> pl.DataFrame(res.json())
shape: (24, 45)
┌─────────────────────────────────┬──────────────────────────────┬──────────────────────────────┬──────────────────────────────────────────────────────────────────────────────┐
│ guid                            ┆ name                         ┆ title                        ┆ description                                                                  │
│ ---                             ┆ ---                          ┆ ---                          ┆ ---                                                                          │
│ str                             ┆ str                          ┆ str                          ┆ str                                                                          │
╞═════════════════════════════════╪══════════════════════════════╪══════════════════════════════╪══════════════════════════════════════════════════════════════════════════════╡
│ 5b6f05d1-1fea-480b-b8fa-51aec6… ┆ AI-Overview                  ┆ Introduction to AI           ┆ An introductory overview of Artificial Intelligence and its core concepts.   │
│ 7ec59570-b199-4f16-8fff-86e3c6… ┆ ML-Models                    ┆ Machine Learning Models      ┆ Detailed explanation of various machine learning models and their applicatio │
│ 3f4140dd-5924-4b31-bb2e-2031b2… ┆ DeepLearning-Techniques      ┆ Advanced Deep Learning       ┆ Exploration of advanced techniques in deep learning, including neural network│
│ 62ebbc03-818b-41f2-91fe-4718bb… ┆ Tech-Trends2024              ┆ Technology Trends in 2024    ┆ A look into the upcoming technology trends expected to dominate in 2024.     │
│ 2bd2a699-b46e-4e6a-8eb6-caca49… ┆ Health-Innovations           ┆ Innovations in Healthcare    ┆ Innovations and breakthroughs in the healthcare industry for better outcomes.│
│ …                               ┆ …                            ┆ …                            ┆ …                                                                            │
│ d235306c-7155-4aa3-aac0-a6b587… ┆ Software-Development         ┆ Software Development Basics  ┆ Basics of software development, including best practices and methodologies.  │
│ 3bed9e07-b793-43ea-839a-37e41b… ┆ Mobile-Apps-Trends           ┆ Trends in Mobile Apps        ┆ Current trends in mobile app development and popular frameworks.             │
│ 1d79c2c7-c649-40be-a0b5-3be159… ┆ Stats-Overview               ┆ Overview of Statistics       ┆ Comprehensive overview of statistics and its importance in data analysis.    │
│ 2c67c0c5-3d8b-44c7-a4b3-a80787… ┆ AI-Applications              ┆ Applications of AI           ┆ Various applications of artificial intelligence across different industries. │
│ 2bee37f3-1f44-4ba5-bbdc-092dd0… ┆ Data-Visualization           ┆ Data Visualization Techniques┆ Techniques and tools for effective data visualization and presentation.      │
└─────────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────────────────────────────────────────────────────┘

```

## R

The `content_list_by_tag()` function returns a data frame of content for the provided tag.

```{.r}
library(connectapi)
client <- connect()

tag_tree <- get_tags(client)
target_tag <- tag_tree$Departments$Administrative

tagged_content <- content_list_by_tag(client, target_tag)
```

### Expected output

```{.r}
> tagged_content
# A tibble: 1 × 46
  guid       name  title description access_type locked locked_message connection_timeout
  <chr>      <chr> <chr> <chr>       <chr>       <lgl>  <chr>                       <int>
1 154bd2af-… cont… Cont… ""          logged_in   FALSE  ""                             NA
# ℹ 38 more variables: read_timeout <int>, init_timeout <int>, idle_timeout <int>,
#   max_processes <int>, min_processes <int>, max_conns_per_process <int>,
#   load_factor <dbl>, memory_request <lgl>, memory_limit <lgl>, cpu_request <lgl>,
#   cpu_limit <lgl>, amd_gpu_limit <lgl>, nvidia_gpu_limit <lgl>,
#   service_account_name <lgl>, default_image_name <lgl>, created_time <dttm>,
#   last_deployed_time <dttm>, bundle_id <chr>, app_mode <chr>, content_category <chr>,
#   parameterized <lgl>, cluster_name <chr>, image_name <chr>, r_version <chr>, …

```

:::

## Recipe: Find tags by content item

A content item identifier is required to find tags.

::: {.panel-tabset group="language"}

## Python

```{.python}
from posit import connect
client = connect.Client()

CONTENT_ITEM_GUID = "your-content-item-guid"

res = client.get(f"/v1/content/{CONTENT_ITEM_GUID}/tags")
```

### Example Output
```{.python}
>>> pl.DataFrame(res.json())
shape: (2, 5)
┌─────┬───────────────────────────┬───────────┬──────────────────────┬──────────────────────┐
│ id  ┆ name                      ┆ parent_id ┆ created_time         ┆ updated_time         │
│ --- ┆ ---                       ┆ ---       ┆ ---                  ┆ ---                  │
│ str ┆ str                       ┆ str       ┆ str                  ┆ str                  │
╞═════╪═══════════════════════════╪═══════════╪══════════════════════╪══════════════════════╡
│ 4   ┆ Software                  ┆ 1         ┆ 2017-04-18T19:54:24Z ┆ 2017-05-19T18:15:39Z │
│ 751 ┆ Artificial Intelligence   ┆ 736       ┆ 2017-04-18T19:54:32Z ┆ 2017-05-03T20:15:27Z │
└─────┴───────────────────────────┴───────────┴──────────────────────┴──────────────────────┘
```


## R

The `get_content_tags()` function returns a tag tree object for the provided content item.

```{.r}
content_guid <- "154bd2af-e8fa-4aa4-aab8-dcef701f4af9"
target_content <- get_content(client, guid = content_guid)

tags <- get_content_tags(target_content)
```

## Expected output

```{.r}
> tags
Posit Connect Tag Tree (content)
└── Departments
   └── Administrative
```

:::

#### See Also

- [Content](../../content/index.qmd)
- [Tags](../index.qmd)
