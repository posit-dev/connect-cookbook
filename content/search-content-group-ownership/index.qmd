---
title: Search for content based on group ownership
execute: 
  eval: false
---

## Description 

This recipe searches Connect for content that is accessible to a group. 
This is useful for auditing access control lists for content on your server, 
or validating that the various groups you manage have access to all the content 
they should.

::: {.callout-note}
Administrator credentials are needed in order to perform this action.
::: 

## Output

This recipe generates a data frame of content GUIDs, names, and titles that the group has access to.

## Workflow
This recipe requires the following inputs:

1. The GUID of the group that you are interested in. 

This recipe then does the following:

1. Queries the **[`GET /v1/experimental/groups/:guid/content`](../../api/#get-/v1/experimental/groups/-guid-/content)**
endpoint which returns a list of content that group has access to.

## Recipe

:::{.panel-tabset group="language"}

## Python

```{python}
from posit import connect
import pandas as pd
client = connect.Client() 

### User-defined inputs ###
# 1. The GUID of the group you want to look up
group_GUID = "e81c2c09-cd4c-468c-b6b8-891cd49363f0" 
###########################

results = client.get(f"v1/experimental/groups/{group_GUID}/content")
results_df = pd.DataFrame(results.json())

results_df[["content_guid", "content_name", "content_title"]]
```

### Example output

```
                           content_guid                content_name          content_title
0  2aa38512-46e4-4be7-9bb9-0b32a9370fc7                                       Stock Report                                   
1  f33285e4-6916-4241-b241-858f0335ba38                           top-5-income-share-shiny                       
2  0bef0ba7-1470-458f-95b3-6e93c31c78b7    quarto-stock-report-r     quarto-stock-report-r
```

## R

```{r}
library(connectapi)
client <- connect()

### User-defined inputs ###
# 1. The GUID of the group you want to look up
group_GUID <- "e81c2c09-cd4c-468c-b6b8-891cd49363f0" 
###########################

results <- client$GET(glue::glue("v1/experimental/groups/{group_GUID}/content"))

purrr::list_rbind(purrr::map(results, as.data.frame))[c("content_guid", "content_name", "content_title")]
```

### Example output

```
                          content_guid          content_name            content_title
1 2aa38512-46e4-4be7-9bb9-0b32a9370fc7                                   Stock Report
2 f33285e4-6916-4241-b241-858f0335ba38                       top-5-income-share-shiny
3 0bef0ba7-1470-458f-95b3-6e93c31c78b7 quarto-stock-report-r    quarto-stock-report-r
```

:::

## Extending the recipe

Now that you have the content that a group can see, you can use the content GUID 
in other recipes like [Remove all viewers from a content item](../remove-all-content-users/) 
to prevent the group (and others) from being able to access that that content.
