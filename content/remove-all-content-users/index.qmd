---
title: Remove all viewers from a content item

---

## Description

This recipe removes all viewers, or optionally, all viewers and collaborators, from a piece of content. Additionally, if the access type is either "all" or "logged_in", this is changed to "acl" to ensure that only the owner, and optionally, collaborators, have access.

This recipe is useful when you want to take bulk action to restrict access to content.

## Output

There is no generated output from this recipe, however the permissions for the specified content item are updated on the Connect server.

## Workflow

This recipe requires the following inputs:

1. The `content_guid` for the content item from which you want to alter permissions.
2. Optionally, a boolean value for `also_remove_collabs`. If set to `True`, all collaborators will also be removed from the content item, leaving only the publisher. If set to `False`, only viewers will be removed.

This recipe then does the following:
1. Removes all viewers (or optionally all viewers and collaborators) from a piece of content.
2. Modifies the access settings to ensure only the owner, and optionally, collaborators, have access.

## Recipe

::: {.panel-tabset group="language"}
## Python

```{python}
from posit import connect

#### User-defined inputs ####
# 1. specify the guid for the content
content_guid = "INSERT_CONTENT_GUID"

# 2. Remove only viewers or also remove collaborators, leaving only the publisher? Default is only viewers (`also_remove_collabs = False`).
also_remove_collabs = False
############################

# if the value of also_remove_collabs is not a boolean, print a message and set it to False as a fail-safe
if type(also_remove_collabs) != bool:
    print("The value of `also_remove_collabs` must be a boolean. Setting it to False to be safe.")
    also_remove_collabs = False


client = connect.Client()

# For the specified content item, iteratively adjust permissions.
for perm in client.content.get(content_guid).permissions.find():
    if also_remove_collabs or perm.role == "viewer":
        perm.delete()


# Confirm new permissions
client.content.get(content_guid).permissions.find()


# If the access type for the content is not set to an Access Control List ("acl"), modify this to ensure that only the owner has access
access_type = client.content.get(content_guid).access_type

if access_type != "acl":
    client.content.get(content_guid).update(access_type="acl")

```


## R

```{r}
library(connectapi)
library(purrr)

#### User-defined inputs ####
# 1. specify the guid for the content
content_guid <- "INSERT_CONTENT_GUID"

# 2. Remove only viewers or also remove collaborators, leaving only the publisher? Default is only viewers (`also_remove_collabs = FALSE`).
also_remove_collabs <- FALSE
############################

# if the value of also_remove_collabs is not a boolean, print a message and set it to False as a fail-safe
if (!is.logical(also_remove_collabs)) {
  message("The value of `also_remove_collabs` must be a boolean. Setting it to FALSE to be safe.")
  also_remove_collabs <- FALSE
}

client <- connect()

# Adjust permissions for the specified content item.
content <- content_item(client, content_guid)

# get permissions
perms <- content$permissions()

#TODO: this can be cleaned up per GH issue https://github.com/rstudio/connectapi/issues/253
# get id of each viewer and owner (collaborator)
viewer_ids <- map(perms, ~.x$id[.x$role == "viewer"]) |> unlist()
collab_ids <- map(perms, ~.x$id[.x$role == "owner"]) |> unlist()

# remove all viewers
walk(viewer_ids, ~content$permissions_delete(.x))
if (also_remove_collabs) {
  # remove collaborators too
  walk(collab_ids, ~content$permissions_delete(.x))
}

# Confirm new permissions
get_content_permissions(content)

# If the access type for the content is not set to an Access Control List ("acl"), modify this to ensure that only the owner has access
access_type <- content$content$access_type

if (access_type != "acl") {
  content_update_access_type(content, access_type = "acl")
}

```


:::

### Example

The images below show the results when `also_remove_collabs` is set to `True`.

:::: {.columns}

::: {.column width="50%"}

Before removing permissions:
![](./images/before.png)

:::

::: {.column width="50%"}

After removing permissions:
![](./images/after.png)

:::

::::
