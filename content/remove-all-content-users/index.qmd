---
title: Remove all users from content
execute: 
  eval: false
---

This recipe removes all users except the content owner from a piece of content and changes the permissivity of access to "acl" so that only specified users/groups can access the content. 

## Requirements

- `CONNECT_SERVER` environment variable
- `CONNECT_API_KEY` environment variable for an administrator or publisher^[the publisher must have access to the content item of interest]
- Content guid for the conten of interest

## Method 

Content permissions are available at the `/v1/content/{guid}/permissions/{id}` endpoint of the Connect Server API. This recipe removes all users except the owner from a piece of content.

Additionally, the content access type is available from the `/v1/content/{guid}` endpoint. If the access type is either "all" or "logged_in", this is changed to "acl" to ensure that only the owner has access. 

### Setup

Install the required packages.

::: {.panel-tabset group="language"}
## Python

We strongly recommend the use of virtual environments to manage project-level dependencies. The code below uses `venv` for this purpose.

```{.bash}
# In your project directory

# create virtual environment and activate it
python -m venv .venv && source .venv/bin/activate

# upgrade `pip` and install `setuptools`, `wheel`
python -m pip install -U pip setuptools wheel

# install the `posit-sdk` package
pip install posit-sdk
```

## R

We strongly recommend the use of virtual environments to manage project-level dependencies. The code below uses `renv` for this purpose.

```{r}
# In your project directory

# install `renv` package
install.packages(renv)

# initialize the project-level environment
renv::init()

# install required packages
install.packages(c("connectapi", "tidyverse"))

```


:::

### Remove all users and groups from content and restrict access type

::: {.panel-tabset group="language"}
## Python

```{python}
### Load required packages
from posit import connect

### User-defined inputs
# 1. specify the guid for the content
content_guid = "f55cdaed-c13e-4838-b466-c288e021f5ee"
# content_guid = "INSERT_CONTENT_GUID"


### Establish connection to Connect server
# Note `connect.Client()` automatically detects the environment variables CONNECT_SERVER and CONNECT_API_KEY. They do not need to be specified as arguments to this function, however, if these environment variables are not set, the code will fail
client = connect.Client() 


### For the specified content item, iterate over all set permissions and remove them. All that will remain will be the publisher.
for perm in client.content.get(content_guid).permissions.find():
    # if perm.role != "owner":
        perm.delete()


### Confirm that all permissions have been removed
client.content.get(content_guid).permissions.find()


### If the access type for the content is either "all" or "logged_in", modify this to "acl" to ensure that only the owner has access
access_type = client.content.get(content_guid).access_type

if access_type in ["all", "logged_in"]:
    client.content.get(content_guid).update(access_type="acl")

```


## R

```{r}
### Load required packages
library(connectapi)
library(tidyverse)

### User-defined inputs
# 1. specify the guid for the content
# 1. specify the guid for the content
content_guid <- "f55cdaed-c13e-4838-b466-c288e021f5ee"
# content_guid <- "INSERT_CONTENT_GUID"

### Establish connection to Connect server
# Note `connectapi::connect` automatically detects the environment variables CONNECT_SERVER and CONNECT_API_KEY. They do not need to be specified as arguments to this function, however, if these environment variables are not set, the code will fail.
client <- connectapi::connect()

### For the specified content item, list all permissions and remove them. All that will remain will be the publisher.
content <- content_item(client, content_guid)

permissions <- get_content_permissions(content)
users_to_remove <- permissions |> filter(principal_type == "user") |> pull(principal_guid)
groups_to_remove <- permissions |> filter(principal_type == "group") |> pull(principal_guid)

content_delete_user(content, users_to_remove)
content_delete_group(content, groups_to_remove)

### Confirm that all permissions have been removed (the publisher will remain)
get_content_permissions(content)

### If the access type for the content is either "all" or "logged_in", modify this to "acl" to ensure that only the owner has access
access_type <-  content$content$access_type

if (access_type %in% c("all", "logged_in")) {
  content_update_access_type(content, access_type = "acl")
}

```


:::

Sample results:

:::: {.columns}

::: {.column width="50%"}

Before removing permissions:
![](./images/before.png)

:::

::: {.column width="50%"}

After removing permissions:
![](./images/after.png)

:::

:::: 
