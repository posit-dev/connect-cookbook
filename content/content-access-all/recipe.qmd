---
title: "Recipe: Identify content set to No Login Required"
format:
  html:
    toc: true
execute: 
  eval: false
---

This recipe provides details on how to identify any content published on Connect with permissions set to `no login required`. 

This recipe would come in handy while performing an audit of all content published on Posit Connect and there is a need to identify any content with open access. It also helps identify which URL is associated with such content and who the publisher is.


## Method

Running the following code will generate a table of all content that is set without restriction. The information includes URL of the content on Connect and the username of the content owner. 

::: {.panel-tabset group="language"}


## Python

```{python identify_content_python}
#| code-fold: false
#| output: false
#| eval: false

from posit.connect import Client  
import pandas as pd  
import itables

def make_clickable(val):
    return f'<a target="_blank" href="{val}">{val}</a>'

connect = Client()

content = pd.DataFrame(connect.content.find())

content["Owner"] = (pd.json_normalize(content["owner"]))["username"]
content["Last Updated"] = pd.to_datetime(content["last_deployed_time"]).dt.date
content = content[content['access_type']=='all']
content = content[["title","Owner","content_url","Last Updated"]]
content = content.rename(columns={"title": "App Name", "content_url": "URL"})
content = content.style.format({'URL': make_clickable})

# # Build a table
itables.show(content) 

```

Example output:

![](./images/example-py.png)

## R

```{r identify_content_r}
#| warning: false
#| code-fold: false
#| output: false

library(connectapi)
library(dplyr)
library(tidyr)
library(gt)


# get content from Connect API
client <- connect()

content <- get_content(client)
content <- unnest_wider(content,col = c('owner'),names_sep = '$')


content[['Last Updated']] = as.Date(content[['last_deployed_time']])
tbl <- content |>
  rename( "Owner" = "owner$username",
         "App Name" = "title",
         "URL" = "content_url") |>
  filter(access_type=='all') |>
  select(c("App Name","Owner","URL","Last Updated"))

# Build a table
gt(tbl) |>
  fmt_url(columns = c("URL")) |> 
    opt_interactive(use_search = TRUE)

```

Example output:

![](./images/example-r.png)

:::

## Further Action

There can be many ways to take further action based on the content list generated above. 

If the objective is to generate a list of the content, the above code block provides that information.

The URLs provided can be used to audit the access within networks, i.e., you can check if the URL is reachable outside your organization's network or not.

The usage of each content listed above can be checked using the content usage recipe.

The list above also identifies the content publisher, who can be reached out to if there is a need to modify the access.
