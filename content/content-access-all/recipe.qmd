---
title: "Identify content set to \"No Login Required\""
execute: 
  eval: false
---

## Description
This recipe provides details on how to identify any content published on Connect with permissions set to `no login required`. 

This recipe would come in handy while performing an audit of all content published on Posit Connect and there is a need to identify any content with open access. It also helps identify which URL is associated with such content and who the publisher is.

## Output
This recipe yields a table of all content that is set without restriction. The information includes URL of the content on Connect and the username of the content owner. 

## Workflow

This recipe does the following:

1. Retrieves all content from Connect.
2. Filters the content to include only those with `access_type` set to `all`.
3. Formats the output as a table with clickable URLs.

## Recipe

::: {.panel-tabset group="language"}


## Python

```{python}
#| label: identify_content_python

from posit.connect import Client  
import pandas as pd  
import itables

def make_clickable(val):
    return f'<a target="_blank" href="{val}">{val}</a>'

connect = Client()

content = pd.DataFrame(connect.content.find())

content = content[content['access_type']=='all']

content["Owner"] = (pd.json_normalize(content["owner"]))["username"]
content["Last Updated"] = pd.to_datetime(content["last_deployed_time"]).dt.date
content = content[["title","Owner","content_url","Last Updated"]]
content = content.rename(columns={"title": "App Name", "content_url": "URL"})
content = content.style.format({'URL': make_clickable})

# # Build a table
itables.show(content) 

```

### Example output:

![](./images/example-py.png)

## R

```{r}
#| label: identify_content_r

library(connectapi)
library(dplyr)
library(tidyr)
library(gt)


# get content from Connect API
client <- connect()

content <- get_content(client)
content <- unnest_wider(content, col = c('owner'),names_sep = '$')

tbl <- content |>
  filter(access_type=='all') |>
  rename( "Owner" = "owner$username",
         "App Name" = "title",
         "URL" = "content_url") |>
  mutate('Last Deployed' = as.Date(last_deployed_time)) |>
  select(c("App Name","Owner","URL","Last Updated"))

# Build a table
gt(tbl) |>
  fmt_url(columns = c("URL")) |> 
    opt_interactive(use_search = TRUE)

```

### Example output:

![](./images/example-r.png)

:::

## Extending the recipe

There can be many ways to take further action based on the content list generated above. 

If the objective is to generate a list of the content, the above code block provides that information.

The URLs provided can be used to audit the access within networks, i.e., you can check if the URL is reachable outside your organization's network or not.

The usage of each content listed above can be checked using the content usage recipe.

The list above also identifies the content publisher, who can be reached out to if there is a need to modify the access.
