---
title: Identify images used in off-host execution
execute:
  eval: false
---

## Description

When Posit Connect is configured to use the off-host execution model, content is executed in containers using Kubernetes.
This recipe shows how to find what images are used by content deployed to Connect.

## 1. See which images are used

In this example, we query Connect for all content items visible to the current user and count how many items use which images.
The result is a table, sorted by most commonly used images.

::: {.panel-tabset group="language"}
## Python

```{python}
import polars as pl
from posit import connect

con = connect.Client()
df = pl.DataFrame(con.content.find(), infer_schema_length=None)
df.group_by("image_name").count().sort("count", descending=True)
```

Example output:
```
shape: (24, 2)
┌───────────────────────────────────┬───────┐
│ image_name                        ┆ count │
│ ---                               ┆ ---   │
│ str                               ┆ u32   │
╞═══════════════════════════════════╪═══════╡
│ null                              ┆ 927   │
│ ghcr.io/rstudio/content-pro:r4.1… ┆ 245   │
│ ghcr.io/rstudio/content-pro:r3.4… ┆ 178   │
│ ghcr.io/rstudio/content-pro:r3.2… ┆ 156   │
│ ghcr.io/rstudio/content-pro:r3.6… ┆ 140   │
│ …                                 ┆ …     │
│ ghcr.io/rstudio/content-pro:r3.3… ┆ 13    │
│ ghcr.io/rstudio/content-pro:r3.5… ┆ 12    │
│ ghcr.io/edavidaja/r-quarto:r4.3.… ┆ 9     │
│ ghcr.io/rstudio/content-pro:r4.1… ┆ 1     │
│ ghcr.io/rstudio/content-pro:r4.0… ┆ 1     │
└───────────────────────────────────┴───────┘
```

## R

```{r}
library(connectapi)
library(dplyr)

# Find all content, group by image_name and count,
# sorting by most frequently used image

client <- connect()
client |>
  get_content() |>
  count(image_name) |>
  arrange(desc(n))
```

Example output:

```
# A tibble: 24 × 2
   image_name                                                  n
   <chr>                                                   <int>
 1 NA                                                        927
 2 ghcr.io/rstudio/content-pro:r4.1.3-py3.10.4-bionic        245
 3 ghcr.io/rstudio/content-pro:r3.4.4-py3.6.13-bionic        178
 4 ghcr.io/rstudio/content-pro:r3.2.5-py2.7.18-bionic        156
 5 ghcr.io/rstudio/content-pro:r3.6.3-py2.7.18-bionic        140
 6 ghcr.io/rstudio/content-pro:r3.5.3-py2.7.18-bionic        129
 7 ghcr.io/rstudio/content-pro:r4.0.5-py3.6.13-bionic        104
 8 ghcr.io/rstudio/content-pro:r4.1.3-py3.10.11-ubuntu2204   103
 9 ghcr.io/rstudio/content-pro:r4.1.0-py3.8.8-bionic         100
10 ghcr.io/rstudio/content-pro:r4.2.2-py3.11.3-ubuntu2204     90
# ℹ 14 more rows
# ℹ Use `print(n = ...)` to see more rows
```

:::

## 2. Find all content using an image

In this version, we provide an image name and return a list of GUIDs of the content items using it.

::: {.panel-tabset group="language"}
## Python

```{python}
from posit import connect

con = connect.Client()

# Change this to whatever image_name you want to find
image = "ghcr.io/rstudio/content-pro:r4.1.3-py3.10.4-bionic"

[c.guid for c in con.content.find() if c.image_name == image]
```

Example output:

```
['c1f789f8-4772-4b87-8b53-eaf863496c79', '875fc38a-121b-40a9-a0f9-eced7aab28af']
```

## R

```{r}
library(connectapi)
library(dplyr)

# Change this to whatever image_name you want to find
image <- "ghcr.io/rstudio/content-pro:r4.1.3-py3.10.4-bionic"

client <- connect()
client |>
  get_content() |>
  filter(image_name == image) |>
  pull(guid)
```

Example output:

```
[1] "c1f789f8-4772-4b87-8b53-eaf863496c79"
[2] "875fc38a-121b-40a9-a0f9-eced7aab28af"
```

:::

## 3. See what's in an image

To see what versions of Python, R, and Quarto are included in an image, we can query the "environments" endpoint and filter to match the image name. This recipe finds the image and just prints it.

::: {.panel-tabset group="language"}
## Python

```{python}
from posit import connect

con = connect.Client()

# Change this to whatever image_name you want to find
image = "ghcr.io/rstudio/content-pro:r4.1.3-py3.10.4-bionic"

all_images = con.get("/v1/environments").json()
for i in all_images:
    if i['title'] == image:
      print(i)
      break
```

Example output:

```
{'id': '21', 'guid': '1c3d420d-6919-4839-98d2-3c35cf95b6c3', 'created_time': '2023-06-02T02:26:33Z', 'updated_time': '2023-06-02T02:26:33Z', 'title': 'ghcr.io/rstudio/content-pro:r4.1.3-py3.10.4-bionic', 'description': 'This environment was bootstrapped from the Launcher.ClusterDefinition configuration file.', 'cluster_name': 'Kubernetes', 'name': 'ghcr.io/rstudio/content-pro:r4.1.3-py3.10.4-bionic', 'environment_type': 'Kubernetes', 'matching': 'exact', 'supervisor': '', 'python': {'installations': [{'version': '3.10.4', 'path': '/opt/python/3.10.4/bin/python3'}]}, 'quarto': {'installations': [{'version': '1.0.35', 'path': '/opt/quarto/bin/quarto'}]}, 'r': {'installations': [{'version': '4.1.3', 'path': '/opt/R/4.1.3/bin/R'}]}}
```

## R

```{r}
library(connectapi)
library(purrr)

# Change this to whatever image_name you want to find
image <- "ghcr.io/rstudio/content-pro:r4.1.3-py3.10.4-bionic"

client <- connect()
all_images <- client$GET("/v1/environments")
image_names <- map_chr(all_images, ~ .$title)

if (image %in% image_names) {
  print(all_images[[match(image, image_names)]])
} else {
  print("Image not found")
}
```

Example output:

```
$id
[1] "21"

$guid
[1] "7c3d520d-6519-48b9-98d2-3c355095bac3"

$created_time
[1] "2023-06-02T02:26:33Z"

$updated_time
[1] "2023-06-02T02:26:33Z"

$title
[1] "ghcr.io/rstudio/content-pro:r4.1.3-py3.10.4-bionic"

$description
[1] "This environment was bootstrapped from the Launcher.ClusterDefinition configuration file."

$cluster_name
[1] "Kubernetes"

$name
[1] "ghcr.io/rstudio/content-pro:r4.1.3-py3.10.4-bionic"

$environment_type
[1] "Kubernetes"

$matching
[1] "exact"

$supervisor
[1] ""

$python
$python$installations
$python$installations[[1]]
$python$installations[[1]]$version
[1] "3.10.4"

$python$installations[[1]]$path
[1] "/opt/python/3.10.4/bin/python3"




$quarto
$quarto$installations
$quarto$installations[[1]]
$quarto$installations[[1]]$version
[1] "1.0.35"

$quarto$installations[[1]]$path
[1] "/opt/quarto/bin/quarto"




$r
$r$installations
$r$installations[[1]]
$r$installations[[1]]$version
[1] "4.1.3"

$r$installations[[1]]$path
[1] "/opt/R/4.1.3/bin/R"
```

:::
