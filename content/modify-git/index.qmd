---
title: Modify git repository settings for git-backed content
execute: 
  eval: false
---

## Description 

This recipe modifies the git repository URL and/or the branch of a git-backed content item. This is useful in situations where the git repository has migrated from one location or host to another, or if the branch of the repository has been renamed, deleted, or otherwise changed.

## Output

There is no generated output from this recipe, however it will modify the content settings for the specified content, which will be reflected in the content Info pane in the Connect UI.

## Workflow
This recipe requires the following inputs:

1. The `content_guid` for the content item that you want to modify. 
2. The new git repository URL and/or branch name.

This recipe then does the following:

1. Retrieves the current git settings for the specified content item.
2. Replaces the existing git settings with the new settings.

## Recipe

:::{.panel-tabset group="language"}

## Python

```{.python}
from posit import connect
client = connect.Client() 

### User-defined inputs ###
# 1. specify the guid for the content item you want to modify
content_guid = "INSERT_CONTENT_GUID" 
# 2. Specify git repository URL 
repo_url = "INSERT_REPO_URL"
# 3. Specify branch name
branch = "INSERT_BRANCH_NAME"
# 4. Specify the directory path. Default is `.`
directory = "."
# 5. Periodically repository for updates? Default is `True`
periodic_update = True
###########################

# check that periodic update is a boolean
if not isinstance(periodic_update, bool):
    raise ValueError("periodic_update must be a boolean True or False")

# View current git settings for content
client.get(f"/v1/content/{content_guid}/repository").json()

# create the json payload to replace the git settings
data = {
    "repository": repo_url,
    "branch": branch,
    "directory": directory,
    "polling": periodic_update
}

# Update the git settings for the content. A 200 status code indicates success.
client.put(f"/v1/content/{content_guid}/repository", json=data)

# View updated git settings for content
client.get(f"/v1/content/{content_guid}/repository").json()

```
### Example output

```
>>> client.get(f"/v1/content/{content_guid}/repository").json()
{'repository': 'https://github.com/my-organization/my-repo.git',
 'branch': 'master',
 'directory': '.',
 'polling': True}
>>> data = {
...     "repository": 'https://gitlab.com/my-new-organization/my-relocated-repo.git',
...     "branch": 'main',
...     "directory": '.',
...     "polling":  True
... }
>>> client.put(f"/v1/content/{content_guid}/repository", json=data)
<Response [200]>
>>> client.get(f"/v1/content/{content_guid}/repository").json()
{'repository': 'https://gitlab.com/my-new-organization/my-relocated-repo.git',
 'branch': 'main',
 'directory': '.',
 'polling': True}
```

## R

```{.r}
library(connectapi)
library(glue)
library(tibble)

client <- connect()

### User-defined inputs ###
# 1. specify the guid for the content item you want to modify
content_guid <- "INSERT_CONTENT_GUID" 
# 2. Specify git repository URL 
repo_url <- "INSERT_REPO_URL"
# 3. Specify branch name
branch <- "INSERT_BRANCH_NAME"
# 4. Specify the directory path. Default is `.`
directory = "."
# 5. Periodically repository for updates? Default is `TRUE`
periodic_update <- TRUE
###########################

# check that periodic update is a boolean
if (!is.logical(periodic_update)) {
  stop("periodic_update must be a boolean TRUE or FALSE")
}

# View current git settings for content
client$GET(glue::glue("/v1/content/{content_guid}/repository")) |> as_tibble()

# create the json payload to replace the git settings
data <- list(
  repository = repo_url,
  branch = branch,
  directory = directory,
  polling = periodic_update
)

# Update and view the git settings for the content.
client$PUT(glue::glue("/v1/content/{content_guid}/repository"), body=data) |> as_tibble()


```

### Example output

```
> client$GET(glue::glue("/v1/content/{content_guid}/repository")) |> as_tibble()
# A tibble: 1 × 4
  repository                                       branch   directory polling
  <chr>                                            <chr>    <chr>     <lgl>  
1 https://github.com/my-organization/my-repo.git   master   .         FALSE   
> data <- list(
+   repository = "https://gitlab.com/my-new-organization/my-relocated-repo.git",
+   branch = "main",
+   directory = ".",
+   polling = TRUE
+ )
> client$PUT(glue::glue("/v1/content/{content_guid}/repository"), body=data) |> as_tibble()
# A tibble: 1 × 4
  repository                                                    branch directory polling
  <chr>                                                         <chr>  <chr>     <lgl>  
1 https://gitlab.com/my-new-organization/my-relocated-repo.git  main   .         TRUE   

```

:::

