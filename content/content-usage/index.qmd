---
title: Retrieve Content Usage Statistics
execute: 
  eval: false
---

This recipe yields summary usage statistics for a content item deployed on Connect.

## Requirements

- CONNECT_SERVER environment variable
- CONNECT_API_KEY environment variable for an administrator or publisher^[the publisher must have access to the content item to retrieve usage statistics]
- Content guid for content of interest


## Method 

Connect records content visits (or "hits") for all content types. These may be user visits to the content or programmatic requests to content or APIs hosted on Connect. 

Content usage data includes the `user_guid` (or `NA` for anonymous viewers), and access timestamp. Shiny for Python and Shiny for R content usage data also includes session duration.

- For all content *except Shiny for Python and Shiny for R*, the usage data is exposed at the [`/v1/instrumentation/content/visits` endpoint](https://docs.posit.co/connect/api/#get-/v1/instrumentation/content/visits)

- Shiny for Python and Shiny for R usage data is exposed at the [`/v1/instrumentation/shiny/usage` endpoint](https://docs.posit.co/connect/api/#get-/v1/instrumentation/shiny/usage)

Review the [Operational Metrics](https://docs.posit.co/connect/admin/operational-metrics/#content-visit-events) section of the Connect Administration Guide for details of how content visit events are logged. 

::: {.callout-note}
Note that if your Connect version is prior to 2023.10, content visits for Plumber, Voila, Streamlit, Dash, and Bokeh were over-counted in instrumentation metics. Metrics collected after upgrading to version 2023.10 or greater are accurate.
::: 

This recipe provides methods for:

1. Retrieving overall historical content usage
2. Identifying usage by user
3. Deploying a sample Quarto dashboard using these methods 


### Setup

Install the required packages.

::: {.panel-tabset group="language"}
## Python

We strongly recommend the use of virtual environments to manage project-level dependencies. The code below uses `venv` for this purpose.

```{.bash}
# In your project directory

# create virtual environment and activate it
python -m venv .venv && source .venv/bin/activate

# upgrade pip, setuptools, and install wheel
python -m pip install -U pip setuptools wheel

# install the `posit-sdk` package
pip install posit-sdk
```

## R

We strongly recommend the use of virtual environments to manage project-level dependencies. The code below uses `renv` for this purpose.

```{r}
# In your project directory

# install `renv` package
install.packages(renv)

# initialize the project-level environment
renv::init()

# install required packages
install.packages(c("connectapi", "tidyverse"))

```


:::


### Retrieve historical content usage data

The code samples below will yield content usage data as a data frame.

:::{.panel-tabset group="language"}

## Python 

```{python}
### Load required packages
from posit.connect import Client
from datetime import datetime, timedelta
import os
import sys
import pandas as pd

import requests ## TODO can remove this when SDK has usage implementation. see https://github.com/posit-dev/posit-sdk-py/issues/137


### User-defined inputs
# 1. specify the guid for the content
content_guid = "INSERT_CONTENT_GUID" 

# 2. Specify timeframe for the report. Default is 30 days prior to today
as_of_date = datetime.today()
days_back = 30

# 3. For by-user summary, specify if the data should truncate to show only the Top N users for the content. Default is Inf for no truncation
top_n = 20

report_from = as_of_date - timedelta(days=days_back)

### Establish connection to Connect server
# Note `Client()` will automatically detect the environment variables CONNECT_SERVER and CONNECT_API_KEY. They do not need to be specified as arguments to this function, however, if these environment variables are not set, the code will fail
client = Client()

### Determine if the desired content is Shiny or not. This will dictate which telemetry endpoint to use
# Retrieve content details
content_info = client.content.get(content_guid)

# Determine type from the `app_mode`
type = content_info.app_mode

### Query appropriate telemetry endpoint for usage data
if type == "shiny" or type == "python-shiny":

  # Request visit records for the given content GUID
  session = requests.Session()
  session.headers.update({ "Authorization": f"Key {os.getenv("CONNECT_API_KEY")}" })
  session.params.update({
    "content_guid": content_guid,
    "from": report_from.strftime('%Y-%m-%dT%H:%M:%SZ'),
    "to": as_of_date.strftime('%Y-%m-%dT%H:%M:%SZ')
      })
  response = session.get(
      f"{os.getenv("CONNECT_SERVER")}/__api__/v1/instrumentation/shiny/usage"
  )

  # Store all the results and the paging information
  json_data = response.json()
  next_page = json_data['paging']['next']
  usage = pd.DataFrame(json_data['results'])

  # Continue to page through additional records
  # while we have a "next" reference
  while next_page:
    response = session.get(next_page)
    json_data = response.json()
    next_page = json_data['paging']['next']
    results = pd.DataFrame(json_data['results'])
    usage = pd.concat([usage, results])

  usage['started'] = pd.to_datetime(usage['started'])
  usage['day'] = usage['started'].dt.floor('D')


else:
  # Request visit records for the given content GUID
  session = requests.Session()
  session.headers.update({ "Authorization": f"Key {os.getenv("CONNECT_API_KEY")}" })
  session.params.update({
    "content_guid": content_guid,
    "from": report_from.strftime('%Y-%m-%dT%H:%M:%SZ'),
    "to": as_of_date.strftime('%Y-%m-%dT%H:%M:%SZ')
      })
  response = session.get(
      f"{os.getenv("CONNECT_SERVER")}/__api__/v1/instrumentation/content/visits"
  )

  # Store all the results and the paging information
  json_data = response.json()
  next_page = json_data['paging']['next']
  usage = pd.DataFrame(json_data['results'])

  # Continue to page through additional records
  # while we have a "next" reference
  while next_page:
    response = session.get(next_page)
    json_data = response.json()
    next_page = json_data['paging']['next']
    results = pd.DataFrame(json_data['results'])
    usage = pd.concat([usage, results])

  usage['time'] = pd.to_datetime(usage['time'])
  usage['day'] = usage['time'].dt.floor('D')

### View usage data as a data frame
usage

```

<!-- TODO: can this be formatted better? -->
Sample output:
```
	content_guid	    user_guid	        started                   ended	     data_version	day
0	0477855b-caeb-...	7d7d3b07-1ca1-...	2024-03-08 17:14:24+00:00	2024-03-08T17:14:43Z	1	2024-03-08 00:00:00+00:00
1	0477855b-caeb-...	7d7d3b07-1ca1-...	2024-03-12 16:20:31+00:00	2024-03-12T16:20:47Z	1	2024-03-12 00:00:00+00:00
2	0477855b-caeb-...	d03a6b7a-c818-...	2024-03-14 16:13:16+00:00	2024-03-14T16:17:30Z	1	2024-03-14 00:00:00+00:00
3	0477855b-caeb-...	1ec56831-7a34-...	2024-03-19 21:09:03+00:00	2024-03-19T21:10:05Z	1	2024-03-19 00:00:00+00:00
4	0477855b-caeb-...	1ec56831-7a34-...	2024-03-19 21:39:07+00:00	2024-03-19T22:39:48Z	1	2024-03-19 00:00:00+00:00
5	0477855b-caeb-...	d59e7a7b-9684-...	2024-03-20 00:36:29+00:00	2024-03-20T00:37:10Z	1	2024-03-20 00:00:00+00:00
```

## R

```{r}
### Load required packages
library(connectapi)
library(tidyverse)

### User-defined inputs
# 1. specify the guid for the content
content_guid <- "INSERT_CONTENT_GUID" 

# 2. Specify timeframe for the report. Default is 30 days prior to today
as_of_date <- lubridate::today()
days_back <- 30

report_from <- as_of_date - lubridate::ddays(days_back)

### Establish connection to Connect server
# Note `connectapi::connect` will automatically detect the environment variables CONNECT_SERVER and CONNECT_API_KEY. They do not need to be specified as arguments to this function, however, if these environment variables are not set, the code will fail
client <- connectapi::connect()

### Determine if the desired content is Shiny or not. This will dictate which telemetry endpoint to use
# Retrive content details
content_info <- connectapi::get_content(client, guid = content_guid)

# Determine type from the `app_mode`
type <- content_info$app_mode

### Query appropriate telemetry endpoint for usage data
if(type == "shiny" || type == "python-shiny"){
  usage <- connectapi::get_usage_shiny(client, 
                                       content_guid = content_guid, 
                                       from = report_from, 
                                       to = as_of_date,
                                       limit = Inf) |>
            dplyr::mutate(day = lubridate::floor_date(started, "day"))
}else{
  usage <- connectapi::get_usage_static(client, 
                                        content_guid = content_guid, 
                                        from = report_from,
                                        to = as_of_date,
                                        limit = Inf) |>
            dplyr::mutate(day = lubridate::floor_date(time, "day"))
  
}

### View usage data as a data frame
usage

```

Sample output:
```
# A tibble: 11 Ã— 6
   content_guid         user_guid            started             ended               data_version day                
   <chr>                <chr>                <dttm>              <dttm>                     <int> <dttm>             
 1 0477855b-caeb-...    7d7d3b07-1ca1-...    2024-03-08 17:14:24 2024-03-08 17:14:43            1 2024-03-08 00:00:00
 2 0477855b-caeb-...    7d7d3b07-1ca1-...    2024-03-12 16:20:31 2024-03-12 16:20:47            1 2024-03-12 00:00:00
 3 0477855b-caeb-...    d03a6b7a-c818-...    2024-03-14 16:13:16 2024-03-14 16:17:30            1 2024-03-14 00:00:00
 4 0477855b-caeb-...    1ec56831-7a34-...    2024-03-19 21:09:03 2024-03-19 21:10:05            1 2024-03-19 00:00:00
 5 0477855b-caeb-...    1ec56831-7a34-...    2024-03-19 21:39:07 2024-03-19 22:39:48            1 2024-03-19 00:00:00
 6 0477855b-caeb-...    d59e7a7b-9684-...    2024-03-20 00:36:29 2024-03-20 00:37:10            1 2024-03-20 00:00:00
 7 0477855b-caeb-...    1ec56831-7a34-...    2024-03-20 13:50:55 2024-03-20 14:04:04            1 2024-03-20 00:00:00
 8 0477855b-caeb-...    1ec56831-7a34-...    2024-03-20 16:43:56 2024-03-20 16:44:12            1 2024-03-20 00:00:00
 9 0477855b-caeb-...    d59e7a7b-9684-...    2024-03-21 10:52:14 2024-03-21 11:52:37            1 2024-03-21 00:00:00
10 0477855b-caeb-...    fc80bd89-4488-...    2024-03-25 19:16:45 2024-03-25 19:28:19            1 2024-03-25 00:00:00
11 0477855b-caeb-...    989001e2-66df-...    2024-03-26 19:48:37 2024-03-26 21:43:10            1 2024-03-26 00:00:00
```

The output above can be plotted for a historical perspective on content usage. An example is included in the Quarto dashboard code at the end of this recipe.

:::

### Identifying usage by user

The code samples below will yield by-user content usage data as a data frame. 

::: {.panel-tabset group="language"}

## Python


## R

```{r}
### Get user details to cross reference `user_guid` with usernames
all_users <- connectapi::get_users(client, limit = Inf)

### Join user data with usage data
by_user_usage <- usage |>
                  select(user_guid, day) |> 
                  group_by(user_guid) |> 
                  # add a column for total visits/hits by that user
                  mutate(total_visits = n()) |> 
                  ungroup() |> 
                  group_by(user_guid, day) |> 
                  # add a column for visits/hits by that user on a particular day
                  mutate(daily_visits = n()) |> 
                  ungroup() |> 
                  # cross reference with user data to bring in usernames
                  left_join(all_users, by = c(user_guid = "guid")) |> 
                  # if content was accessed anonymously, the user_guid will be NA. Replace these with "anonymous"
                  mutate(username = coalesce(username, "anonymous")) |> 
                  select(username, day, total_visits, daily_visits) |> 
                  distinct() |> 
                  arrange(desc(total_visits))

### View by-user usage data as a data frame
by_user_usage
```

Sample output:
```
# A tibble: 9 Ã— 4
  username       day                 total_visits daily_visits
  <chr>          <dttm>                     <int>        <int>
1 lisa           2024-03-19 00:00:00            4            2
2 lisa           2024-03-20 00:00:00            4            2
3 daniel         2024-03-08 00:00:00            2            1
4 daniel         2024-03-12 00:00:00            2            1
5 andrie         2024-03-20 00:00:00            2            1
6 andrie         2024-03-21 00:00:00            2            1
7 sam            2024-03-14 00:00:00            1            1
8 katie          2024-03-25 00:00:00            1            1
9 connor         2024-03-26 00:00:00            1            1
```

The output above can be plotted for a historical perspective on content usage. An example is included in the Quarto dashboard code at the end of this recipe.

:::


## Deploy a sample Quarto dashboard with these metrics

The Quarto document below builds visualizations around the data frames retrieved above. This can be deployed in your own environment, or customized to your needs.

<!-- TODO: Add github repo and manifest.json link -->



::: {.panel-tabset group="language"}
## Python

Tab content

## R

<!-- TODO: Make this embed work -->

{{ < include _usage-dashboard.qmd > }}

:::
