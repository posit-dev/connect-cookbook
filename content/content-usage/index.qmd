---
title: Retrieve Content Usage Statistics 
execute: 
  eval: false
---

This recipe yields summary usage statistics for a content item deployed on Connect.


## Method 

Connect records content views (or hits) for all content types. These may be user views to the content or programmatic requests to content or APIs hosted on Connect. 

Content usage data includes the `user_guid` (or `NA` for anonymous viewers), and access timestamp. Shiny for Python and Shiny for R content usage data also includes session duration.

- For all content *except Shiny for Python and Shiny for R*, the content usage data is exposed at the [`/v1/instrumentation/content/visits` endpoint](https://docs.posit.co/connect/api/#get-/v1/instrumentation/content/visits)

- Shiny for Python and Shiny for R usage data is exposed at the [`/v1/instrumentation/shiny/usage` endpoint](https://docs.posit.co/connect/api/#get-/v1/instrumentation/shiny/usage)

Review the [Operational Metrics](https://docs.posit.co/connect/admin/operational-metrics/#content-visit-events) section of the Connect Administration Guide for details of how content visit events are logged. 

::: {.callout-note}
Note that if your Connect version is prior to 2023.10, content usage for Plumber, Voila, Streamlit, Dash, and Bokeh were over-counted in instrumentation metrics. Metrics collected after upgrading to version 2023.10 or greater are accurate.
::: 

This recipe provides methods for:

1. Retrieving overall historical content usage
2. Identifying usage by user
3. Deploying a sample Quarto dashboard using these methods 


### Retrieve historical content views data

The code samples below yields content usage data as a data frame.

:::{.panel-tabset group="language"}

## Python 

```{python}
### Load required packages
from posit import connect
from datetime import date, timedelta
import os
import sys
import polars as pl
import numpy as np


### User-defined inputs
# 1. specify the guid for the content
content_guid = "INSERT_CONTENT_GUID" 

# 2. Specify timeframe for the report. Default is 30 days prior to today
as_of_date = date.today()
days_back = 30

# 3. Specify if the summary should show only the Top N users for the content (e.g., `top_n = 10`), or all users (as indicated by `np.nan`). Default is `np.nan` so that all users are shown. 
top_n = np.nan

report_from = as_of_date - timedelta(days=days_back)

### Establish connection to Connect server
# Note `connect.Client()` automatically detects the environment variables CONNECT_SERVER and CONNECT_API_KEY. They do not need to be specified as arguments to this function, however, if these environment variables are not set, the code will fail
client = connect.Client() 

### Get content usage data
df = client.metrics.usage.find(
    content_guid=content_guid,
    start=report_from.strftime("%Y-%m-%dT%H:%M:%SZ"),
    end=as_of_date.strftime("%Y-%m-%dT%H:%M:%SZ"))
    
usage = (pl.DataFrame(df, infer_schema_length=len(df))
        .with_columns(pl.col("started").str.to_datetime("%Y-%m-%dT%H:%M:%SZ"))
        .with_columns(pl.col("started").cast(pl.Date).alias("day")))


usage

```

Sample output:
```
shape: (10, 10)
    content_guid	       user_guid	variant_key	rendering_id	bundle_id	            started	           ended	data_version	path	       day
             str	             str	       null	        null	     null	       datetime[μs]	             str	         i64	null	      date
"0477855b-caeb-…	"3dc75833-f6c2-…	       null	        null	     null	2024-04-11 00:36:00	"2024-04-11T00:…	           1	null	2024-04-11                               
"0477855b-caeb-…	"26a7e881-a6c6-…	       null	        null	     null	2024-04-22 14:19:17	"2024-04-22T14:…	           1	null	2024-04-22                                 
"0477855b-caeb-…	"26a7e881-a6c6-…	       null	        null	     null	2024-04-22 14:19:35	"2024-04-22T14:…	           1	null	2024-04-22                               
"0477855b-caeb-…	"26a7e881-a6c6-…	       null	        null	     null	2024-04-22 14:20:33	"2024-04-22T15:…	           1	null	2024-04-22                               
"0477855b-caeb-…	"d03a6b7a-c818-…	       null	        null	     null	2024-04-22 21:04:24	"2024-04-22T22:…	           1	null	2024-04-22                               
"0477855b-caeb-…	"d03a6b7a-c818-…	       null	        null	     null	2024-04-23 17:33:48	"2024-04-23T18:…	           1	null	2024-04-23                               
"0477855b-caeb-…	"1ec56831-7a34-…	       null	        null	     null	2024-04-23 19:29:28	"2024-04-23T19:…	           1	null	2024-04-23                               
"0477855b-caeb-…	"fc80bd89-4488-…	       null	        null	     null	2024-04-24 20:19:10	"2024-04-24T20:…	           1	null	2024-04-24                               
"0477855b-caeb-…	"1ec56831-7a34-…	       null	        null	     null	2024-04-26 15:10:18	"2024-04-26T15:…	           1	null	2024-04-26                               
"0477855b-caeb-…	"1ec56831-7a34-…	       null	        null	     null	2024-04-26 15:18:59	"2024-04-26T15:…	           1	null	2024-04-26  


```
The output above can be plotted for a historical perspective on content usage. An example is included in the Quarto dashboard code at the end of this recipe.

## R

```{r}
### Load required packages
library(connectapi)
library(dplyr)
library(lubridate)

### User-defined inputs
# 1. specify the guid for the content
content_guid <- "INSERT_CONTENT_GUID"

# 2. Specify timeframe for the report. Default is 30 days prior to today
as_of_date <- today()
days_back <- 30

report_from <- as_of_date - ddays(days_back)

### Establish connection to Connect server
# Note `connectapi::connect` automatically detects the environment variables CONNECT_SERVER and CONNECT_API_KEY. They do not need to be specified as arguments to this function, however, if these environment variables are not set, the code will fail.
client <- connect()

### Determine if the desired content is Shiny or not. This will dictate which telemetry endpoint to use
# Retrive content details
content_info <- get_content(client, guid = content_guid)

# Determine type from the `app_mode`
type <- content_info$app_mode

### Query appropriate telemetry endpoint for usage data
if (type == "shiny" || type == "python-shiny") {
  usage <- get_usage_shiny(client,
    content_guid = content_guid,
    from = report_from,
    to = as_of_date,
    limit = Inf
  ) |>
    mutate(day = floor_date(started, "day"))
} else {
  usage <- get_usage_static(client,
    content_guid = content_guid,
    from = report_from,
    to = as_of_date,
    limit = Inf
  ) |>
    mutate(day = floor_date(time, "day"))
}

### View usage data as a data frame
usage

```

Sample output for a Shiny app:
```
# A tibble: 14 × 6
   content_guid      user_guid         started             ended               data_version day                
   <chr>             <chr>             <dttm>              <dttm>                     <int> <dttm>             
 1 0477855b-caeb-... 1ec56831-7a34-... 2024-03-19 21:09:03 2024-03-19 21:10:05            1 2024-03-19 00:00:00
 2 0477855b-caeb-... 1ec56831-7a34-... 2024-03-19 21:39:07 2024-03-19 22:39:48            1 2024-03-19 00:00:00
 3 0477855b-caeb-... d59e7a7b-9684-... 2024-03-20 00:36:29 2024-03-20 00:37:10            1 2024-03-20 00:00:00
 4 0477855b-caeb-... 1ec56831-7a34-... 2024-03-20 13:50:55 2024-03-20 14:04:04            1 2024-03-20 00:00:00
 5 0477855b-caeb-... 1ec56831-7a34-... 2024-03-20 16:43:56 2024-03-20 16:44:12            1 2024-03-20 00:00:00
 6 0477855b-caeb-... d59e7a7b-9684-... 2024-03-21 10:52:14 2024-03-21 11:52:37            1 2024-03-21 00:00:00
 7 0477855b-caeb-... fc80bd89-4488-... 2024-03-25 19:16:45 2024-03-25 19:28:19            1 2024-03-25 00:00:00
 8 0477855b-caeb-... 989001e2-66df-... 2024-03-26 19:48:37 2024-03-26 21:43:10            1 2024-03-26 00:00:00
 9 0477855b-caeb-... 5c7cb633-5959-... 2024-03-28 17:13:03 2024-03-28 17:19:35            1 2024-03-28 00:00:00
10 0477855b-caeb-... fc80bd89-4488-... 2024-03-28 18:26:20 2024-03-28 18:34:40            1 2024-03-28 00:00:00
11 0477855b-caeb-... fc80bd89-4488-... 2024-03-28 20:53:50 2024-03-28 20:54:36            1 2024-03-28 00:00:00
12 0477855b-caeb-... cbee884e-f940-... 2024-03-29 16:13:44 2024-03-29 16:14:15            1 2024-03-29 00:00:00
13 0477855b-caeb-... fc80bd89-4488-... 2024-03-29 18:16:10 2024-03-29 20:43:52            1 2024-03-29 00:00:00
14 0477855b-caeb-... 3dc75833-f6c2-... 2024-04-11 00:36:00 2024-04-11 00:36:59            1 2024-04-11 00:00:00
```
Usage data for non-Shiny content will also include columns identifying `variant_key`, `rendering_id`, `bundle_id`, and `path`. These columns are not used for this recipe.
<!-- TODO: remove this note once connectapi has wrapper for usage -->

The output above can be plotted for a historical perspective on content usage. An example is included in the Quarto dashboard code at the end of this recipe.

:::

### Identifying usage by user

The code samples below yield by-user content usage data as a data frame. 

::: {.panel-tabset group="language"}

## Python

```{python}
### Get user details to cross reference `user_guid` with usernames
all_users = pl.DataFrame(client.users.find())

### Make a table of a user's total usage
user_tot_usage = (
  usage.group_by("user_guid")
  .agg(pl.len().alias("tot_usage"))
  # change any `nan` user_guid to "anonymous"
  .with_columns(pl.coalesce(pl.col("user_guid"), pl.lit("anonymous")).alias("user_guid")) 
)

### Make a table of a user's daily usage and combine with total usage
user_daily_usage = (
...   usage.group_by(["user_guid","day"])
...   .agg(pl.len()
...   .alias("daily_usage"))
...   .join(all_users, left_on="user_guid", right_on="guid", how="left")
...   .with_columns(pl.coalesce(pl.col("username"), pl.lit("anonymous")).alias("username"))
...   .with_columns(pl.coalesce(pl.col("user_guid"), pl.lit("anonymous")).alias("user_guid"))
...   # join with total usage table
...   .join(user_tot_usage, on="user_guid", how="left")
...   .select(["username", "day","tot_usage", "daily_usage"])
...   .sort("tot_usage",descending=True)
... )

```

Sample output:
```
shape: (11, 4)
 username	       day	tot_usage	daily_usage
      str	      date	       u32	         u32
"lisa"	    2024-03-20	         4	           2
"katie"    	2024-03-28	         4	           2
"katie"	    2024-03-29	         4	           1
"lisa"	    2024-03-19	         4	           2
"katie"	    2024-03-25	         4	           1
         …	         …	         …	           …         
"andrie"  	2024-03-21	         2	           1
"ryan"	    2024-04-11	         1	           1
"rika"	    2024-03-28	         1	           1
"jonathan"	2024-03-29	         1	           1
"connor"	2024-03-26	         1	           1

```
The output above can be plotted for a historical perspective on content views. An example is included in the Quarto dashboard code at the end of this recipe.

## R

```{r}
### Get user details to cross reference `user_guid` with usernames
all_users <- get_users(client, limit = Inf)

### Join user data with usage data
by_user_usage <- usage |>
                  select(user_guid, day) |> 
                  group_by(user_guid) |> 
                  # add a column for total usage/hits by that user
                  mutate(total_usage = n()) |> 
                  ungroup() |> 
                  group_by(user_guid, day) |> 
                  # add a column for usage/hits by that user on a particular day
                  mutate(daily_usage = n()) |> 
                  ungroup() |> 
                  # cross reference with user data to bring in usernames
                  left_join(all_users, by = c(user_guid = "guid")) |> 
                  # if content was accessed anonymously, the user_guid will be NA. Replace these with "anonymous"
                  mutate(username = coalesce(username, "anonymous")) |> 
                  select(username, day, total_usage, daily_usage) |> 
                  distinct() |> 
                  arrange(desc(total_usage))

### View by-user usage data as a data frame
by_user_usage
```

Sample output:
```
# A tibble: 11 × 4
   username  day                 total_usage daily_usage
   <chr>    <dttm>                     <int>        <int>
 1 lisa     2024-03-19 00:00:00            4            2
 2 lisa     2024-03-20 00:00:00            4            2
 3 katie    2024-03-25 00:00:00            4            1
 4 katie    2024-03-28 00:00:00            4            2
 5 katie    2024-03-29 00:00:00            4            1
 6 andrie   2024-03-20 00:00:00            2            1
 7 andrie   2024-03-21 00:00:00            2            1
 8 connor   2024-03-26 00:00:00            1            1
 9 rika     2024-03-28 00:00:00            1            1
10 jonathan 2024-03-29 00:00:00            1            1
11 ryan     2024-04-11 00:00:00            1            1
```

The output above can be plotted for a historical perspective on content views. An example is included in the Quarto dashboard code at the end of this recipe.

:::


## Deploy a sample Quarto dashboard with these metrics

The Quarto document below builds visualizations around the data frames retrieved above. This can be deployed in your own environment, or customized to your needs.

<!-- TODO: Add github repo and manifest.json link -->



::: {.panel-tabset group="language"}
## Python

<!-- TODO: Make this embed work -->
<!-- TODO: Add a screenshot -->
{{ < include _usage-dashboard-py.qmd > }}

## R

<!-- TODO: Make this embed work -->
<!-- TODO: Add a screenshot -->
{{ < include _usage-dashboard-r.qmd > }}

:::
