---
title: Identify RunAs Linux Accounts In Use
execute: 
  eval: false
---

## Description 

This recipe details the number of content items deployed to a Posit Connect server that have been configured to use a custom `RunAs` Linux account. It also provides a means for listing all content run by a particular `RunAs` account.

This may be useful when auditing the server in preparation for a migration, to understand what accounts need to be replicated in the new environment. It is also generally helpful to understand if content on the server has specific run-time requirements.

## Output

The first recipe generates tables listing the Linux `RunAs` user and the number of content items running with this account. The second recipe lists all content run by a specified `RunAs` account.

## Workflow

Two independent, but related recipes are provided below: 

1. List the number of content items configured to use a custom `RunAs` account.
2. List all content items using a specific `RunAs` account.

## Recipe: List the number of content items configured to use a custom `RunAs` account

In this recipe, content running as the default Connect user is listed with a `RunAs` account of `default`.

:::{.panel-tabset group="language"}

## Python

```{.python}
from posit import connect
import polars as pl

client = connect.Client() 

df_content = client.content.find()
content = (pl.DataFrame(df_content, infer_schema_length=len(df_content)))

(content
.with_columns(pl.coalesce(content['run_as'], pl.lit("default")).alias("run_as"))
.group_by("run_as").agg([pl.col("run_as").count().alias("count")])
.sort("count", descending=True))

```
### Example output

```
shape: (3, 2)
           run_as	count
              str	  u32
        "default"	  121
 "sa-engineering"	    8
     "sa-finance"	    3

```

## R

```{.r}
library(connectapi)
library(dplyr)

client <- connect()

content <- get_content(client)

content |> 
  mutate(run_as = coalesce(run_as, "default")) |> 
  group_by(run_as) |> 
  summarise(count = n()) |> 
  arrange(desc(count))

```

### Example output

```
  run_as         count
  <chr>          <int>
1 default          121
2 sa-engineering     8
3 sa-finance         3
```

:::

## Recipe: List all content items using a specific `RunAs` account

:::{.panel-tabset group="language"}

## Python

```{.python}
from posit import connect
import polars as pl

### User-defined inputs ###
# 1. specify the Linux account
run_as = "INSERT_LINUX_ACCOUNT_NAME" 
############################

client = connect.Client() 

df_content = client.content.find()
(pl.DataFrame(df_content, infer_schema_length=len(df_content))
   .with_columns(pl.coalesce(content['run_as'], pl.lit("default")).alias("run_as"))
   .with_columns(pl.col("owner").map_elements(lambda x: x["username"], return_dtype=pl.String).alias("owner_username"))
   .filter(pl.col("run_as") == run_as)
   .select(["guid", "run_as", "title", "owner_username", "dashboard_url"])
)

```

### Example output

```
shape: (3, 5)

            guid	      run_as	                          title	 owner_username	     dashboard_url
             str	         str	                            str	            str	               str
"95fcb004-4fc7-…	"sa-finance"	   "Loan Risk Prediction Model"	     "publisher1"	 "https://connect…
"be1a08f1-b41a-…	"sa-finance"	"Evaluation Analysis Dashboard"	     "publisher3"	 "https://connect…
"75a340d8-1454-…	"sa-finance"	                "Loan Risk API"	     "publisher3"	 "https://connect…

```

## R

```{.r}
library(connectapi)
library(dplyr)
library(tidyr)

### User-defined inputs ###
# 1. specify the Linux account
run_as <- "INSERT_LINUX_ACCOUNT_NAME" 
############################

client <- connect()

run_as <- "default"

content <- get_content(client) |> 
  mutate(run_as = coalesce(run_as, "default")) |> 
  hoist(owner, owner_username = "username") |> 
  filter(run_as == run_as) |>
  select(guid, run_as, title, owner_username, dashboard_url)
```

### Example output

```
# A tibble: 3 × 5
  guid             run_as      title                           owner_username dashboard_url                     
  <chr>            <chr>       <chr>                           <chr>          <chr>                             
1 95fcb004-4fc7-…  sa-finance  Loan Risk Prediction Model      publisher1     https://connect…
2 be1a08f1-b41a-…  sa-finance  Evaluation Analysis Dashboard   publisher3     https://connect…
3 75a340d8-1454-…  sa-finance  Loan Risk API                   publisher3     https://connect…
```

:::

