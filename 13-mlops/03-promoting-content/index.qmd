---
title: Promoting Content
---

## Problem

You want to promote content from one Posit Connect location to another. The location may be a different Posit Connect server or on the same server.

## Solution

:::{.panel-tabset group="language"}

## Python

Unlike other examples, this recipe creates two `Client` objects. One for the source location and one for the target location. Here we define the API keys and URL information inline. In your environment, please follow best practices to keep your credential information secure.

```{.python}
from posit import connect

source_client = connect.Client(api_key='your-source-api-key', url='your-source-url')
target_client = connect.Client(api_key='your-target-api-key', url='your-target-url')
```

Next, find the content you want to promote from (source) and the content you want to promote to (target).

```python
source_content = source_client.content.get('your-source-content-guid')
target_content = target_client.content.get('your-target-content-guid')
```

Download the bundle. In most cases, the latest bundle is the bundle you want to promote. Otherwise, obtain the bundle using its identifier (id).

```python
source_bundle = source_content.bundles.get('your-bundle-id')
```

Then, transfer the bundle.

```python
source_bundle.download('bundle.tar.gz')
target_bundle = target_content.bundles.create('bundle.tar.gz')
```

Finally, deploy the bundle on the target server. This starts a new deployment task  on the target server to render the bundle.

```python
deployment_task = target_bundle.deploy()
```

Optionally, wait for the deployment task to complete.

```python
deployment_task.wait_for()
```

### Full Example

```python
from posit import connect

source_client = connect.Client(api_key='your-source-api-key', url='your-source-url')
target_client = connect.Client(api_key='your-target-api-key', url='your-target-url')

source_content = source_client.content.get('your-source-content-guid')
target_content = target_client.content.get('your-target-content-guid')

source_bundle = source_content.bundles.get('your-bundle-id')

source_bundle.download('bundle.tar.gz')
target_bundle = target_content.bundles.create('bundle.tar.gz')

deployment_task = target_bundle.deploy()
deployment_task.wait_for()
```

## R

# TODO

:::

## Discussion

Your organization may have a setup where permissions and environments are segregated into a staging and production system.

Data scientists within your organization are responsible for creating applications and reports. They frequently iterate, experiment, and share updates. Content updates are continuously published to the staging environment, which enables the team to share work in progress without affecting your business's critical production content.

Once an application or report is ready for general use, the team undergoes peer review, testing, and final approval for production use. The data science team does not have user permissions to publish content to the production environment. Instead, the deployment team is responsible for this process to ensure a secure and predictable deployment. They have secure user accounts with write access to the production environment. A deployment engineer downloads the precise bundle archive from the staging environment and deploys it into production.
